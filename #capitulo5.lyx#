#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\use_default_options true
\begin_modules
knitr
\end_modules
\maintain_unincluded_children false
\language spanish-mexico
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Escritura-de-Funciones"

\end_inset

Escritura de Funciones
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<widthcap5, include=F>>=
\end_layout

\begin_layout Plain Layout

options('width')
\end_layout

\begin_layout Plain Layout

options(width=60)
\end_layout

\begin_layout Plain Layout

options('width')
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout

<<set-options, echo=FALSE, cache=FALSE>>=
\end_layout

\begin_layout Plain Layout

read_chunk('Gammas.R')
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
En los capítulos anteriores se han revisado distintos tópicos de la programación
 con este lenguaje.
 En medio de las explicaciones provistas, se ha indicado implícitamente
 la forma de escribir funciones; en particular, en la sección 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Funciones"

\end_inset

, se ha dado una breve introducción al tema de la escritura de funciones.
 En este capítulo se abordará ese mismo tema, pero de una manera un poco
 más formal.
\end_layout

\begin_layout Section
Estructura formal de una función
\end_layout

\begin_layout Standard
Como se ha visto con anterioridad, R trata las funciones prácticamente igual
 que cualquier otra variable.
 Así, ellas se pueden manipular de manera semejante a como se hace con otros
 objetos de R: se pueden pasar como argumentos de otras funciones, se pueden
 regresar como el valor final de una función, se pueden definir en el interior
 de otra función, etc.
 Para crear o definir una función, se emplea la directiva 
\family typewriter

\begin_inset Quotes eld
\end_inset

function
\begin_inset Quotes erd
\end_inset


\family default
, en general, asociándola con un símbolo mediante una operación de asignación,
 como se muestra en la Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Definición-funcion-1"

\end_inset

.
 Esta directiva, tiene dos partes, la definición de los 
\emph on
argumentos formales
\emph default
 de la función, y el cuerpo de la función.
 El cuerpo de la función está constituido por una o más expresiones válidas
 del lenguaje.
 Al ejecutarse la función, el valor de la última expresión en la secuencia
 de ejecución, es el valor que la función entrega como resultado; esto simbólica
mente se ha indicado en la figura, como la última expresión del cuerpo,
 aunque, como se verá más adelante no necesariamente es así.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename EstructuraFuncion.jpg
	lyxscale 60
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Definición-funcion-1"

\end_inset

Definición de una función
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Existen dos 
\emph on
momentos
\emph default
 importantes en la 
\emph on
vida
\emph default
 de una función: la definición de la función, que básicamente ocurre una
 vez, y la ejecución de la función, que puede ocurrir un sinnúmero de ocasiones
 y en contextos muy diversos.
 La nociones de argumentos formales, variables y valor de regreso en el
 interior de una función, deben ser examinadas desde la perspectiva de esos
 dos momentos.
\end_layout

\begin_layout Subsection
Argumentos y valor de resultado de una función
\end_layout

\begin_layout Standard
Los argumentos de una función se enfocan desde las perspectivas de los dos
 momentos de la vida de una función: su definición y su ejecución.
 En el momento de la definición de la función se ven principalmente como
 lo que se denomina 
\emph on
argumentos formales
\emph default
, mientras que en el momento de la ejecución, se considera cómo esos argumentos
 formales se asocian con un valor particular a partir de sus respectivos
 
\emph on
argumentos verdaderos
\emph default
 o efectivos, que son los que se especifican o se 
\emph on
pasan
\emph default
, por así decirlo, en el instante de invocar la función.
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Los-argumentos-formales"

\end_inset

Los argumentos formales son uno de los principales medios por el cual la
 función se comunica con el ambiente exterior a ella; esto es, el sitio
 dónde la función es invocada para ejecutarse, y consiste de una lista de
 símbolos, que pudieran tener o no asociado algún valor a utilizar en caso
 de no asignársele alguno en el momento de su invocación.
 Al momento de ejecutarse la función, los argumentos formales se asociarán
 con algún valor, típicamente, a partir de los 
\emph on
argumentos verdaderos
\emph default
 que se proveen en la invocación de la función, o de los 
\emph on
valores por omisión
\emph default
 o de 
\emph on
default
\emph default
, que se hayan indicado en la definición de la función.
 Veamos un ejemplo.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<funciones1, tidy=F>>=
\end_layout

\begin_layout Plain Layout

# Definición -- Versión 1
\end_layout

\begin_layout Plain Layout

MiFunc.v1 <- function (x, yyy, z=5, t) {
\end_layout

\begin_layout Plain Layout

  w <- x + yyy + z
\end_layout

\begin_layout Plain Layout

  w
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Definición -- Versión 2
\end_layout

\begin_layout Plain Layout

MiFunc.v2 <- function (x, yyy, z=5, t) {
\end_layout

\begin_layout Plain Layout

  w <- x + yyy + z
\end_layout

\begin_layout Plain Layout

  return (w)
\end_layout

\begin_layout Plain Layout

  3.1416 # Este código nunca se ejecuta
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Definición -- Versión 3
\end_layout

\begin_layout Plain Layout

MiFunc.v3 <- function (x, yyy, z=5, t) {
\end_layout

\begin_layout Plain Layout

  x + yyy + z
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Ejecuciones:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

MiFunc.v1(1,2,3) # Ejecución 1
\end_layout

\begin_layout Plain Layout

MiFunc.v2(1,2) # Ejecución 2
\end_layout

\begin_layout Plain Layout

MiFunc.v3(1) # Ejecución 3  
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

MiFunc.v3(z=3, yyy=2, x=1) # Ejecución 4
\end_layout

\begin_layout Plain Layout

MiFunc.v2(1, y=2) # Ejecución 5
\end_layout

\begin_layout Plain Layout

MiFunc.v1(1, z=3) # Ejecución 6
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
En el código precedente, se han definido tres versiones de una función que
 tiene la simple tarea de sumar tres números que estarán asociados con los
 tres argumentos formales 
\family typewriter
x
\family default
, 
\family typewriter
yyy
\family default
, 
\family typewriter
z
\family default
; aunque, intencionalmente se ha provisto de un argumento adicional, 
\family typewriter
t
\family default
, que no se emplea en el cuerpo de la función.
 La lista de argumentos formales es semejante en todas las versiones.
 En ella, al tercer argumento, 
\family typewriter
z
\family default
, mediante el operador 
\family typewriter

\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset


\family default
, se le asigna el valor 5 por omisión; lo que quiere decir que si no se
 puede asociar con un argumento verdadero al momento de la ejecución, tomará
 ese valor.
 En todas las versiones se hace la suma de los tres primeros argumentos
 formales; sin embargo, en las dos primeras versiones, el resultado de esta
 operación se 
\emph on
guarda
\emph default
 en una variable local, w, mientras que en la tercer versión, no.
 El resultado de la función, esto es el valor que entregará al ejecutarse,
 se toma de la última expresión ejecutada en el cuerpo de la función.
 En el caso de la primer versión, el resultado es el valor que tenga la
 variable 
\family typewriter
w
\family default
 al momento de ejecutarse, mientras que en la tercera versión, es directamente
 el resultado de la suma de los tres argumentos formales.
 La segunda versión difiere de las otras dos en que se invoca la función
 
\family typewriter
return()
\family default
, que tiene dos consecuencias: la ejecución de la función se interrumpe
 en ese punto y el resultado de la función será el argumento que se pase
 a 
\family typewriter
return()
\family default
.
 En el caso del ejemplo, para esta tercera versión, el resultado será el
 valor de 
\family typewriter
w
\family default
, mientras que la expresión 
\family typewriter
3.1416
\family default
, nunca se ejecutará, y por consiguiente el resultado de la función nunca
 será ese.
\end_layout

\begin_layout Standard
Al momento de ejecutarse la función, los argumentos formales se asocian
 con o toman sus valores de los argumentos verdaderos.
 Una forma de hacer esto es mediante el orden o la posición en que aparecen
 en la definición, y a la que denominaremos 
\emph on
asociación posicional
\emph default
.
 Las primeras tres ejecuciones del código anterior, hacen uso de esta caracterís
tica.
 En la primera, de acuerdo con el orden, los argumentos 
\family typewriter
x
\family default
, 
\family typewriter
yyy
\family default
, 
\family typewriter
z
\family default
, quedan asociados con los valores 1, 2, 3, respectivamente, que son los
 argumentos verdaderos, y se ha omitido especificar algún valor para el
 cuarto argumento, 
\family typewriter
t
\family default
.
 R no tiene ningún problema con esa omisión, ya que 
\family typewriter
t
\family default
 no se usa en ninguna parte del cuerpo de la función, en ninguna de sus
 versiones
\begin_inset Foot
status open

\begin_layout Plain Layout
Esto tiene que ver con lo que se conoce como la 
\emph on
evaluación perezosa
\emph default
 de los argumentos en R y que consiste en que en el momento de ejecución
 de una función, el lenguaje no evalúa los argumentos a no ser que la ejecución
 del código lo requiera.
 En los casos del ejemplo, como el argumento 
\family typewriter
t
\family default
 no se menciona en el cuerpo de la función, nunca se requiere su evaluación
 y por tanto, no constituye un error el que no se haya especificado en la
 invocación de la función.
\end_layout

\end_inset

.
 En la segunda ejecución, se ha omitido además especificar el argumento
 verdadero correspondiente a 
\family typewriter
z
\family default
.
 Nuevamente, el lenguaje no tiene ningún problema con eso, ya que en la
 definición se ha provisto el valor 5 en caso de omisión, por lo que en
 esa ejecución, 
\family typewriter
z
\family default
 toma ese valor y por consiguiente el resultado de la suma es 8.
 En la tercera ejecución, se ha omitido además especificar el argumento
 verdadero correspondiente a 
\family typewriter
y
\family default
.
 Como se puede ver, en este caso el intérprete sí se queja, ya que no se
 ha especificado ningún valor por omisión para dicho argumento.
 
\end_layout

\begin_layout Standard
La otra manera de asociar los argumentos formales con sus correspondientes
 valores determinados por los argumentos verdaderos al momento de la ejecución,
 es mediante sus nombres.
 A esta manera la denominaremos 
\emph on
asociación nominal
\emph default
.
 Las ejecuciones 4, 5 y 6, del código anterior y que son paralelas a las
 primeras tres, hacen uso de esta característica.
 En este caso, no es necesario respetar el orden en que fueron especificados
 los argumentos formales, aunque, como se puede ver en la ejecuciones 5
 y 6, se pueden combinar ambas maneras; esto es, para algunos argumentos
 emplear la asociación posicional, y para otros, la asociación nominal.
 Una nota adicional es que, en este tipo de asociación, como se puede ver
 en la ejecución 5, el lenguaje puede resolver la asociación con un nombre
 de manera 
\emph on
parcial
\emph default
; por ello es que satisfactoriamente resuelve que, en la invocación, la
 especificación 
\family typewriter

\begin_inset Quotes eld
\end_inset

y=2
\begin_inset Quotes erd
\end_inset


\family default
 es lo mismo que 
\family typewriter

\begin_inset Quotes eld
\end_inset

yyy=2
\begin_inset Quotes erd
\end_inset


\family default
, y que, de hecho, se podría también haber especificado como 
\family typewriter

\begin_inset Quotes eld
\end_inset

yy=2
\begin_inset Quotes erd
\end_inset


\family default
.
 Esto se puede hacer, siempre y cuando la expresión especificada pueda ser
 resuelta por este método sin ambigüedad.
\end_layout

\begin_layout Subsection
Revisión de los argumentos de una función
\end_layout

\begin_layout Standard
Una vez definida una función, hay dos funciones de R que permiten revisar
 su lista de argumentos formales, a saber: 
\family typewriter
args()
\family default
 y 
\family typewriter
formals()
\family default
.
 En el siguiente código se ve el comportamiento de cada una de ellas.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<RevArgs, tidy=F>>=
\end_layout

\begin_layout Plain Layout

args(MiFunc.v2)
\end_layout

\begin_layout Plain Layout

(ar <- formals("MiFunc.v2")) # puede o no llevar comillas
\end_layout

\begin_layout Plain Layout

# Si se quiere revisar el argumento z, se hace así:
\end_layout

\begin_layout Plain Layout

ar$z
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La función 
\family typewriter
args()
\family default
, entrega lo que sería el encabezado de la función, desprovisto de su cuerpo;
 prácticamente, permite ver la lista de argumentos de la función tal como
 fue definida.
 Esta función le resulta útil a un usuario del lenguaje para revisar la
 lista de argumentos de cualquier función.
 La función 
\family typewriter
formals()
\family default
, digiere un poco más la información ya que entrega una lista con cada uno
 de los argumentos formales y los valores asignados por omisión.
 Esta función le resulta más útil a un programador que desea manipular esta
 lista
\begin_inset Foot
status open

\begin_layout Plain Layout
En efecto, esta lista es una clase de objeto de R conocido como 
\family typewriter

\begin_inset Quotes eld
\end_inset

pairlist
\begin_inset Quotes erd
\end_inset


\family default
, cada uno de cuyos elementos tiene, por un lado, como nombre el nombre
 de uno de los argumentos y como valor, el valor correspondiente por omisión,
 
\emph on
sin evaluar
\emph default
 aún.
 
\end_layout

\end_inset

.
 Estas funciones resultan útiles para revisar los argumentos de funciones
 de biblioteca, que pueden ser muchos, y sus valores por omisión.
 Por ejemplo, si se quiere revisar esto para la función 
\family typewriter
lm()
\family default
, que se usa para ajustes lineales, se puede hacer con: 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Lo que sigue tuve que hacerlo así porque knitr falla al generar la salida
 de args(lm), pues se excede de los márgenes del documento.
 A lo mejor una nueva versión de knitr corrige esto, pero mientras tanto
 lo hago así.
 Si quiere ver el error, quitar eval=F, de la definición siguiente.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<revlm, eval=F>>=
\end_layout

\begin_layout Plain Layout

args(lm)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout


\backslash
definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}
\end_layout

\begin_layout Plain Layout


\backslash
color{fgcolor}
\end_layout

\begin_layout Plain Layout


\backslash
begin{kframe} 
\end_layout

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

## function (formula, data, subset, weights, na.action, 
\end_layout

\begin_layout Plain Layout

##     method = "qr", model = TRUE, x = FALSE, y = FALSE, 
\end_layout

\begin_layout Plain Layout

##     qr = TRUE, singular.ok = TRUE, contrasts = NULL, 
\end_layout

\begin_layout Plain Layout

##     offset, ...) 
\end_layout

\begin_layout Plain Layout

## NULL
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\begin_layout Plain Layout


\backslash
end{kframe}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
El argumento especial 
\family typewriter

\begin_inset Quotes eld
\end_inset

...
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
En la definición de las funciones existe un argumento especial que se puede
 emplear en distintas circunstancias: se trata del argumento especial 
\family typewriter

\begin_inset Quotes eld
\end_inset

...
\begin_inset Quotes erd
\end_inset


\family default
, que sirve para transferir un número variable de argumentos a otra función.
 La utilidad de este argumento se da en varios casos que se discuten a continuac
ión.
\end_layout

\begin_layout Subsubsection
El uso del argumento 
\family typewriter

\begin_inset Quotes eld
\end_inset

...
\begin_inset Quotes erd
\end_inset


\family default
 para extender una función
\end_layout

\begin_layout Standard
Cuando se quiere extender o modificar el comportamiento de una función invocándo
la desde otra función, una manera de pasar varios argumentos, a los que
 no se hace referencia en la nueva función, es mediante este argumento,
 que en este caso podría ser interpretado más o menos como la frase: 
\emph on

\begin_inset Quotes eld
\end_inset

y el resto de los argumentos
\begin_inset Quotes erd
\end_inset


\emph default
.
 Para explicar como se comporta este 
\emph on
argumento
\emph default
 aquí, a continuación se propone un ejemplo sencillo.
\end_layout

\begin_layout Standard
En la sección anterior, 
\begin_inset CommandInset ref
LatexCommand vref
reference "Los-argumentos-formales"

\end_inset

, se codificó la función 
\family typewriter
MiFunc.v3()
\family default
.
 En la ejecución 3 de esta función, el intérprete se quejó porque, al no
 existir un valor por omisión para el argumento 
\family typewriter
yyy
\family default
, su valor quedó indefinido y no se pudo ejecutar la función.
 Supóngase que se quiere hacer una función que modifique el comportamiento
 de la otra función, simplemente proveyendo un valor por omisión para dicha
 función
\begin_inset Foot
status open

\begin_layout Plain Layout
Desde luego que la opción inmediata sería reprogramar la función.
 Sin embargo, hay muchas funciones de cuyo código no se puede disponer o
 simplemente, la técnica que se ilustra podría servir para contar con diferentes
 versiones de la misma función.
\end_layout

\end_inset

.
 El código para ese propósito es el siguiente:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<NuevaMiFunc>>=
\end_layout

\begin_layout Plain Layout

NuevaMiFunc <- function(x, yyy=-1, ...) {
\end_layout

\begin_layout Plain Layout

  MiFunc.v3(x, yyy, ...)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

NuevaMiFunc(1)
\end_layout

\begin_layout Plain Layout

NuevaMiFunc(x=1)
\end_layout

\begin_layout Plain Layout

NuevaMiFunc(1,z=10)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Nótese que todos los otros argumentos, 
\begin_inset Quotes eld
\end_inset

el resto de los argumentos
\begin_inset Quotes erd
\end_inset

, se pasan intactos de 
\family typewriter
NuevaMiFunc()
\family default
 a 
\family typewriter
MiFunc.v3()
\family default
, como se puede ver en la última ejecución del código anterior.
\end_layout

\begin_layout Subsubsection
El uso del argumento 
\family typewriter

\begin_inset Quotes eld
\end_inset

...
\begin_inset Quotes erd
\end_inset


\family default
 al principio de una función, cuando no se conoce de antemano el número
 de argumentos
\end_layout

\begin_layout Standard
Otro uso de este argumento especial es al principio de funciones para las
 que no se conoce de antemano el número de argumentos que les serán enviados.
 Uno de estos casos es la función 
\family typewriter
paste()
\family default
, que sirve para construir una cadena de caracteres a partir de un número
 cualquiera de cadenas de caracteres que le entreguen como argumentos.
 En seguida se muestra el encabezado de argumentos y el uso de dicha función.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<ejpaste>>=
\end_layout

\begin_layout Plain Layout

args(paste)
\end_layout

\begin_layout Plain Layout

paste("uno","dos", "tres", sep="++")
\end_layout

\begin_layout Plain Layout

paste("uno","dos", "tres", se="++")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
El asunto aquí es que, la asociación con todos los argumentos que siguen
 al argumento especial 
\begin_inset Quotes eld
\end_inset

...
\begin_inset Quotes erd
\end_inset

, es 
\emph on
nominal
\emph default
 y de ninguna manera 
\emph on
posicional
\emph default
; esto es, deben ser explícitamente nombrados si su valor se requiere al
 momento de ser ejecutada la función.
 Además, la asociación parcial de argumentos también está prohibida, como
 se puede ver en la última ejecución del código anterior, donde el intérprete
 no entendió que por 
\family typewriter
se=
\begin_inset Quotes erd
\end_inset

++
\begin_inset Quotes erd
\end_inset


\family default
, se quería significar 
\family typewriter
sep=
\begin_inset Quotes erd
\end_inset

++
\begin_inset Quotes erd
\end_inset


\family default
, y en vez de ello interpretó que se deseaba agregar una cadena más a la
 salida.
\end_layout

\begin_layout Section
Visibilidad del código
\end_layout

\begin_layout Standard
Cada vez que se introduce un nuevo símbolo en alguna parte del código de
 un programa escrito en R, al ejecutarse, el lenguaje tiene que resolver
 de algún modo, de qué manera se asocia ese símbolo con algún objeto computacion
al creado o por crearse dentro del programa: ¿se refiere el símbolo a algún
 objeto que ya existía en el programa?, ¿es necesario crear un nuevo objeto
 asociado con el símbolo que se ha introducido? La visibilidad del código,
 y las reglas de alcance del lenguaje R, que son los temas de esta sección,
 se refieren precisamente a la asociación de los símbolos con los objetos
 computacionales creados durante la ejecución de algún programa y muy particular
mente en el tema de cómo se hace esta asociación cuando se ejecutan las
 funciones.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sec:Asociación-de-símbolos"

\end_inset

Asociación de símbolos con valores
\end_layout

\begin_layout Standard
La primer pregunta que surge en el asunto que se trata en este capítulo
 es: ¿en qué momento se introduce o viene a la existencia en R algún símbolo,
 típicamente para nombrar alguna variable? La respuesta a esta pregunta
 es que básicamente hay dos momentos:
\end_layout

\begin_layout Standard
\noindent

\series bold
Las expresiones de asignación
\series default
.
 Observemos por ejemplo qué pasa con la siguiente expresión:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<asigna1, include=F>>=
\end_layout

\begin_layout Plain Layout

rm(y)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout

<<assigna2>>=
\end_layout

\begin_layout Plain Layout

x <- y
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Después de la asignación, R se ha quejado de la inexistencia del símbolo
 
\family typewriter

\begin_inset Quotes eld
\end_inset

y
\begin_inset Quotes erd
\end_inset


\family default
, pero no se ha quejado de la inexistencia del símbolo 
\family typewriter

\begin_inset Quotes eld
\end_inset

x
\begin_inset Quotes erd
\end_inset


\family default
.
 Esto se debe a que, el símbolo a la izquierda de la asignación se emplea
 para la 
\emph on
escritura
\emph default
 de un objeto al que hace referencia y, si no existe, se crea en ese mismo
 momento; esto equivale a lo que sería la 
\emph on
definición
\emph default
 de una variable en otros lenguajes.
 En cambio, el símbolo o símbolos que aparecen a la derecha son de 
\emph on
lectura
\emph default
 y por lo tanto se presupone su existencia o definición previa.
 En este caso, como R no puede determinar una asociación de este símbolo
 con algún valor, pues 
\family typewriter

\begin_inset Quotes eld
\end_inset

y
\begin_inset Quotes erd
\end_inset


\family default
 no se ha creado previamente, emite un mensaje de error como el mostrado.
 Así pues, los símbolos en el lado izquierdo de las expresiones de asignación
 pueden significar la creación de nuevas variables referidas mediante esos
 símbolos, en el código, a partir de ese momento.
 Dado que la instrucción anterior ha terminado en error, tampoco se ha asociado
 el símbolo 
\family typewriter

\begin_inset Quotes eld
\end_inset

x
\begin_inset Quotes erd
\end_inset


\family default
 con valor alguno; esto es, no se ha creado ningún objeto con ese 
\emph on
nombre
\emph default
.
\end_layout

\begin_layout Standard
\noindent

\series bold
La declaración de argumentos formales de alguna función
\series default
.
 Otra manera de introducir los símbolos correspondientes a 
\emph on
nuevas variables
\emph default
, es mediante la declaración de los argumentos formales en la definición
 de alguna función:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<argform>>=
\end_layout

\begin_layout Plain Layout

f <- function(x,y) {
\end_layout

\begin_layout Plain Layout

    x + y
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
En este ejemplo, el símbolo 
\family typewriter

\begin_inset Quotes eld
\end_inset

f
\begin_inset Quotes erd
\end_inset


\family default
, se ha introducido por la asignación, y los símbolos 
\family typewriter

\begin_inset Quotes eld
\end_inset

x
\begin_inset Quotes erd
\end_inset


\family default
 y
\family typewriter
 
\begin_inset Quotes eld
\end_inset

y
\begin_inset Quotes erd
\end_inset


\family default
, se han introducido mediante su declaración como argumentos formales de
 la función, y cuya validez está delimitada al código de la función.
\end_layout

\begin_layout Standard
Pero, ¿dónde y cómo se organizan esas asociaciones entre símbolos y valores?
 Para introducir esta noción, se asignará al símbolo 
\family typewriter

\begin_inset Quotes eld
\end_inset

t
\begin_inset Quotes erd
\end_inset


\family default
, una función muy simple:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<asignaat, tidy=F>>=
\end_layout

\begin_layout Plain Layout

t <- function(x) {
\end_layout

\begin_layout Plain Layout

    2*x
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Veamos cual es el valor de la
\end_layout

\begin_layout Plain Layout

# variable 't' recien declarada:
\end_layout

\begin_layout Plain Layout

t
\end_layout

\begin_layout Plain Layout

# Usemos la variable:
\end_layout

\begin_layout Plain Layout

t(8)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como era de esperarse, al introducir en la 
\emph on
consola
\emph default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
La 
\emph on
consola
\emph default
 de R, es el ambiente interactivo provisto por el lenguaje, en el cual el
 usuario de éste introduce las expresiones del lenguaje y recibe, después
 de su interpretación, las respuestas correspondientes generadas.
\end_layout

\end_inset

 solamente la variable 
\family typewriter

\begin_inset Quotes eld
\end_inset

t
\begin_inset Quotes erd
\end_inset


\family default
, regresa su valor, que es una función y que se puede utilizar para calcular
 el doble de algún valor, 8, en el caso del ejemplo.
 Resulta, sin embargo, que, como se dijo anteriormente, en la sección 
\begin_inset CommandInset ref
LatexCommand vref
reference "Trasposicion"

\end_inset

, el símbolo 
\family typewriter

\begin_inset Quotes eld
\end_inset

t
\begin_inset Quotes erd
\end_inset


\family default
, ya estaba de entrada asociado con la función de transposición de matrices.
 ¿Qué ha pasado con la definición anterior de 
\family typewriter

\begin_inset Quotes eld
\end_inset

t
\begin_inset Quotes erd
\end_inset


\family default
?, ¿se ha perdido del todo? De hecho, no.
 Se puede recuperar la definición anterior, removiendo la que se acaba de
 introducir.
 Esto se hace de la siguiente manera:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<redeft, tidy=F>>=
\end_layout

\begin_layout Plain Layout

rm(t) # remocion de la definicion anterior de 't'
\end_layout

\begin_layout Plain Layout

# Ahora veamos que es 't'
\end_layout

\begin_layout Plain Layout

t
\end_layout

\begin_layout Plain Layout

# y usemos nuevamente la definicion original:
\end_layout

\begin_layout Plain Layout

mx <- cbind(c(4,5),c(6,7))
\end_layout

\begin_layout Plain Layout

mx
\end_layout

\begin_layout Plain Layout

t(mx) # otra vez, t() es la traspuesta de una matriz
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Nótese que al solicitar el valor del símbolo 
\family typewriter

\begin_inset Quotes eld
\end_inset

t
\begin_inset Quotes erd
\end_inset


\family default
, esta vez, en lugar de desplegar el código de la función asociada, regresa
 un conjunto de información que, en efecto la identifica como una función,
 pero con otros datos adicionales.
 Ello se debe a que se trata de una función de biblioteca.
 Para el asunto que nos ocupa, de la información desplegada, lo que interesa
 es el texto: 
\family typewriter
<environment: namespace:base>
\family default
, pues es un indicador, de que el valor asociado ahora al símbolo 
\family typewriter

\begin_inset Quotes eld
\end_inset

t
\begin_inset Quotes erd
\end_inset


\family default
, se encontraba guardado justamente 
\emph on
ahí
\emph default
, en el ambiente (
\emph on
environment
\emph default
 en inglés) del espacio de nombres (
\emph on
namespace
\emph default
 en inglés), de un paquete o biblioteca llamada 
\begin_inset Quotes eld
\end_inset

base
\begin_inset Quotes erd
\end_inset

.
 Pero, ¿cuántos de estos ambientes hay cuando se ejecuta un programa en
 R?, y ¿de cuál de ellos toma R el valor asociado a un nombre particular?
 La función 
\family typewriter
search()
\family default
, permitirá responder a ambas preguntas:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<fsearch>>=
\end_layout

\begin_layout Plain Layout

search()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
El resultado de esta función es un vector de cadenas de caracteres, cada
 una de las cuales es la descripción de un 
\begin_inset Quotes eld
\end_inset

ambiente
\begin_inset Quotes erd
\end_inset

, en el que se 
\emph on
guardan
\emph default
 asociaciones entre símbolos y valores.
 Para saber los símbolos que contiene alguno de estos ambientes, se usa
 la función 
\family typewriter
ls()
\family default
, con el nombre del ambiente como argumento.
 Como generalmente, estos ambientes contienen una gran cantidad de símbolos,
 filtraremos aquí el resultado con la función 
\family typewriter
head()
\family default
, que limita el resultado a pocos elementos al inicio, seis por 
\emph on
default
\emph default
.
 Así, veamos cuales son esos primeros seis símbolos para el ambiente 
\family typewriter

\begin_inset Quotes eld
\end_inset

package:stats
\begin_inset Quotes erd
\end_inset


\family default
, y la totalidad de los símbolos en primer ambiente, 
\family typewriter

\begin_inset Quotes eld
\end_inset

.GlobalEnv
\begin_inset Quotes erd
\end_inset


\family default
, el argumento default de 
\family typewriter
ls()
\family default
, de la lista anterior, como sigue:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eltsstats, tidy=F>>=
\end_layout

\begin_layout Plain Layout

# Introduzcamos, en la "consola", primeramente un 
\end_layout

\begin_layout Plain Layout

# simbolo cualquiera 'MiSimbolo', para la explicacion
\end_layout

\begin_layout Plain Layout

# posterior en el texto
\end_layout

\begin_layout Plain Layout

MiSimbolo <- 5
\end_layout

\begin_layout Plain Layout

head( ls("package:stats") ) # Primeros seis elementos
\end_layout

\begin_layout Plain Layout

ls() # Equivale a: ls(".GlobalEnv")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Todos los símbolos que se definen mediante el operador de asignación a nivel
 de la 
\emph on
consola
\emph default
 del intérprete de R, se introducen en el primer ambiente de la lista 
\family typewriter
search()
\family default
; esto es, en el ambiente 
\family typewriter

\begin_inset Quotes eld
\end_inset

.GlobalEnv
\begin_inset Quotes erd
\end_inset


\family default
.
 En el ejemplo anterior, se ve que el objeto recién creado asociado al símbolo
 
\family typewriter
MiSimbolo
\family default
, aparece justamente en la lista correspondiente a ese ambiente.
 
\end_layout

\begin_layout Standard
Cuando R busca el valor asociado a un símbolo, lo hace justamente en el
 orden establecido por la lista entregada por la función 
\family typewriter
search()
\family default
.
 Esa es la razón por la cual al redefinir la función 
\family typewriter
t()
\family default
, el intérprete se encontró primero con la nueva definición provista y no
 con la que existía previamente en el ambiente 
\family typewriter

\begin_inset Quotes eld
\end_inset

package:base
\begin_inset Quotes erd
\end_inset


\family default
, que, como se puede ver, es el último de la lista.
 De hecho, el primer ambiente siempre será el ambiente gobal 
\family typewriter

\begin_inset Quotes eld
\end_inset

.GlobalEnv
\begin_inset Quotes erd
\end_inset


\family default
, y el último el correspondiente a 
\family typewriter

\begin_inset Quotes eld
\end_inset

package:base
\begin_inset Quotes erd
\end_inset


\family default
.
 
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Lista-search"

\end_inset

Cada vez que se carga un nuevo paquete, mediante la función 
\family typewriter
library()
\family default
, por ejemplo, su ambiente se introduce en la segunda posición de la lista,
 empujando todos los que ya estaban, una posición 
\emph on
hacia abajo
\emph default
, pero dejando siempre en primer lugar el ambiente global.
 Por ejemplo, si se carga el paquete para desarrollo de interfaces gráficas
 
\family typewriter
tcltk
\family default
, obtenemos lo siguiente:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<libtcktk>>=
\end_layout

\begin_layout Plain Layout

library(tcltk)
\end_layout

\begin_layout Plain Layout

search()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Otro hecho interesante es que R mantiene por separado los espacios de nombres
 de las funciones y de todos los otros objetos que no son funciones.
 De este modo, se pudiera definir un símbolo 
\family typewriter

\begin_inset Quotes eld
\end_inset

t
\begin_inset Quotes erd
\end_inset


\family default
, asociado a un vector, por ejemplo, y aún así tener acceso a la función
 
\family typewriter
t()
\family default
, veamos:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<tyt, tidy=F>>=
\end_layout

\begin_layout Plain Layout

t <- c(1,2,3) # definimos vector
\end_layout

\begin_layout Plain Layout

t(mx) # usamos la funcion t
\end_layout

\begin_layout Plain Layout

t # pero al consultar t, tenemos ...
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Aunque en el ambiente global sólo existe el símbolo 
\family typewriter

\begin_inset Quotes eld
\end_inset

t
\begin_inset Quotes erd
\end_inset


\family default
 correspondiente al vector, no obstante, R acertadamente invoca la función
 de transposición 
\family typewriter
t()
\family default
, por la separación de espacios de nombres entre funciones y no funciones.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sec:Reglas-de-alcance"

\end_inset

Reglas de alcance
\end_layout

\begin_layout Standard
La discusión precedente lleva ahora a considerar lo que se denomina reglas
 de alcance, y que se refieren a la forma como el lenguaje resuelve la asociació
n entre una variable o símbolo libre y su correspondiente valor.
 
\end_layout

\begin_layout Standard
En una función, una variable libre es aquella que no se ha 
\emph on
definido
\emph default
 en el código de la misma, en el sentido explicado al principio de la sección
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Asociación-de-símbolos"

\end_inset

, y cuyo valor, sin embargo, se solicita, al incluir su nombre o símbolo
 correspondiente, típicamente en el lado derecho de una asignación
\begin_inset Foot
status open

\begin_layout Plain Layout
Por ejemplo, otro caso en el que esto puede ocurrir es si dentro de la función
 se llama a otra función pasando como argumento una variable que no ha sido
 previamente definida.
\end_layout

\end_inset

, como se muestra en la Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tipos-de-símbolos"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename VariableLibre.jpg
	lyxscale 70
	width 84text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Tipos-de-símbolos"

\end_inset

Tipos de símbolos en el interior de una función
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para asociar las variables libres con un valor, R utiliza lo que se conoce
 como 
\emph on
alcance léxico
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
El lenguaje S, o más bien su última versión, S-PLUS, usa lo que se conoce
 como 
\emph on
alcance estático
\emph default
, que consiste en resolver el problema de las variables libres, asociándolas
 siempre con los nombres que aparecen en el ambiente global.
 La diferencia entre este tipo de alcance y el 
\emph on
alcance léxico
\emph default
, que es el que usa R, se puede apreciar en la explicación que aparece más
 delante en el texto.
\end_layout

\end_inset

.
 En este tipo de alcance se establece que 
\emph on
los valores de las variables se buscan en el ambiente en el cuál la función
 se definió
\emph default
.
 Como se puede intuir de lo dicho antes, un ambiente es una colección de
 pares <
\emph on
símbolo, valor
\emph default
>, donde, por ejemplo, un símbolo podría ser 
\family typewriter
MiSimbolo
\family default
, y su valor 
\family typewriter
5
\family default
, o el símbolo 
\family typewriter
t
\family default
 y su valor el vector 
\family typewriter
<1,2,3>
\family default
.
 Ahora bien, en R los ambientes se organizan en una jerarquía; esto es,
 cada ambiente tiene un ambiente padre y a su vez puede tener cero o más
 hijos.
 El único ambiente que no tiene padre es el ambiente vacío, que se encuentra
 en lo más alto de la jerarquía.
 Así pues, el lugar dónde R buscará el valor de una variable libre, dependerá
 del lugar dónde se encuentre escrito el código de la función en el que
 se hace referencia a ella.
 Tomemos, por ejemplo, el caso de la función que se ha mostrado en la Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tipos-de-símbolos"

\end_inset

, y veamos la diferencia en el valor que tomará la variable 
\family typewriter

\begin_inset Quotes eld
\end_inset

w
\begin_inset Quotes erd
\end_inset


\family default
, al insertar el código de la función en distintas partes.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename LosAmbientes.jpg
	lyxscale 65
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Jerarquía-en-los"

\end_inset

Jerarquía en los ambientes de las funciones
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
La Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Jerarquía-en-los"

\end_inset

 muestra la inserción de la misma función, 
\family typewriter
MiFunc()
\family default
, en dos distintas partes del código global.
 La jerarquía de los ambientes es diferente en cada caso: en la situación
 marcada como (A), el ambiente global tiene dos hijos el correspondiente
 a la función 
\family typewriter
ff()
\family default
 y el correspondiente a 
\family typewriter
MiFunc()
\family default
, mientras que en la situación (B), el ambiente global tiene un solo hijo,
 el ambiente correspondiente a la función 
\family typewriter
ff()
\family default
, que a su vez tiene un hijo, el correspondiente a la función 
\family typewriter
MiFunc()
\family default
.
 Una nota adicional aquí es que una función puede ser definida en el interior
 de otra función y eso es precisamente lo que ilustra la situación (B) de
 la figura.
\end_layout

\begin_layout Standard
Para resolver el valor de 
\family typewriter

\begin_inset Quotes eld
\end_inset

w
\begin_inset Quotes erd
\end_inset


\family default
, o sea de una variable libre, en cualquier caso, R busca primero en el
 ambiente de la misma función, si no encuentra el símbolo ahí, procede a
 buscar en el ambiente padre, y así lo sigue haciendo con todos los predecesores
 hasta encontrar una asociación.
 Por supuesto que, si en este proceso, llega al ambiente vacío sin encontrar
 una asociación posible, el lenguaje emitirá un mensaje de error.
\end_layout

\begin_layout Standard
En el código que sigue se muestra el comportamiento de R las situaciones
 mostradas en la Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Jerarquía-en-los"

\end_inset

, y se añade una situación más para ejemplificar lo que se ha explicado
 aquí.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<jeraquia1, tidy=F>>=
\end_layout

\begin_layout Plain Layout

w <- 5 # Primera w
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ff <- function() {
\end_layout

\begin_layout Plain Layout

  w <- 3 # Segunda w
\end_layout

\begin_layout Plain Layout

  MiFunc(2,5)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

MiFunc <- function(x,y) {
\end_layout

\begin_layout Plain Layout

  r <- x*y + w
\end_layout

\begin_layout Plain Layout

  r
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ff()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
En este caso, a pesar de que en el interior de la función 
\family typewriter
ff()
\family default
 se ha definido un valor para 
\family typewriter
w
\family default
 de 3, el lenguaje ha resuelto, de acuerdo con la regla explicada previamente,
 que el valor de 
\family typewriter
w
\family default
 en 
\family typewriter
MiFunc()
\family default
 es el del ambiente global, esto es, 5, y por ello el resultado que se despliega
 es 15.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<jeraquia2, tidy=F>>=
\end_layout

\begin_layout Plain Layout

w <- 5 # Primera w
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ff <- function() {
\end_layout

\begin_layout Plain Layout

  MiFunc <- function(x,y) {
\end_layout

\begin_layout Plain Layout

    r <- x*y + w
\end_layout

\begin_layout Plain Layout

    r
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  w <- 3 # Segunda w
\end_layout

\begin_layout Plain Layout

  MiFunc(2,5)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ff()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
En este caso, la asociación del símbolo 
\family typewriter
w
\family default
, referido en el interior de la función 
\family typewriter
MiFunc()
\family default
, con el valor 3, es inmediata, a partir de la variable 
\family typewriter
w
\family default
 definida el ambiente de la función padre 
\family typewriter
ff()
\family default
, por ello el resultado es 13.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<jeraquia3, tidy=F>>=
\end_layout

\begin_layout Plain Layout

w <- 5 # Unica w
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ff <- function() {
\end_layout

\begin_layout Plain Layout

  MiFunc <- function(x,y) {
\end_layout

\begin_layout Plain Layout

    r <- x*y + w
\end_layout

\begin_layout Plain Layout

    r
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  # ELIMINAMOS LA DEFINICION: w <- 3 
\end_layout

\begin_layout Plain Layout

  MiFunc(2,5)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ff()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
En este último caso, se ha eliminado la definición de 
\family typewriter
w
\family default
 en el ambiente de la función 
\family typewriter
ff()
\family default
, por ello, al no encontrar asociación posible en éste ambiente que es el
 padre del ambiente de la función 
\family typewriter
MiFunc()
\family default
, procede hacia arriba en la jerarquía, en este caso al ambiente global
 donde encuentra que 
\family typewriter
w
\family default
 tiene un valor de 5.
 Por eso, aquí el resultado es 15.
\end_layout

\begin_layout Section
Contenido de los ambientes de las funciones
\end_layout

\begin_layout Standard
En el ejemplo que se presentó en la sección anterior, particularmente en
 el caso ilustrado por la Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Jerarquía-en-los"

\end_inset

(B), el uso de la función 
\family typewriter
MiFunc()
\family default
 está confinado al interior de la función 
\family typewriter
ff()
\family default
, que es donde se definió.
 Al ser por sí mismo 
\family typewriter
MiFunc
\family default
, el símbolo correspondiente a una variable, cuyo valor es una función en
 este caso, el lenguaje R, tiene los mecanismos necesarios para revelar
 ese valor, o sea el código de la función, fuera de la función misma donde
 se definió.
 Esto permite usar las funciones definidas en el interior de alguna función,
 afuera del código correspondiente a la función donde se han definido.
 En este caso, las reglas de alcance, descritas previamente, juegan un papel
 muy importante.
 Para ilustrar esto, se propone aquí la creación de una función constructora
 de funciones, de la siguiente manera:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<constructora1, tidy=F>>=
\end_layout

\begin_layout Plain Layout

Construye.multiplicador <- function(n) {
\end_layout

\begin_layout Plain Layout

  fff <- function(x) {
\end_layout

\begin_layout Plain Layout

    n*x
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  fff # Regresa como resultado la funcion creada
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

duplica <- Construye.multiplicador(2)
\end_layout

\begin_layout Plain Layout

triplica <- Construye.multiplicador(3)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

duplica(5)
\end_layout

\begin_layout Plain Layout

triplica(5)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La función 
\family typewriter
fff()
\family default
 tiene una variable libre, a saber, 
\family typewriter
n
\family default
.
 Para resolver el valor de 
\family typewriter
n
\family default
, en el interior de 
\family typewriter
fff()
\family default
, el lenguaje busca en el ambiente padre, el ambiente de la función 
\family typewriter
Construye.multiplicador()
\family default
, en este caso.
 Al momento de la ejecución, 
\family typewriter
n
\family default
, que es un argumento formal de 
\family typewriter
Construye.multiplicador()
\family default
, toma consecutivamente los valores de 2 y 3, y esos son, respectivamente,
 los valores que tomará la variable libre, 
\family typewriter
n
\family default
, al momento de construir las funciones 
\family typewriter
duplica()
\family default
 y 
\family typewriter
triplica()
\family default
.
 
\end_layout

\begin_layout Standard
En R, es posible revisar el contenido del ambiente de una función, e incluso
 encontrar el valor asociado a un símbolo determinado en esos ambientes.
 Para ello se usan las funciones 
\family typewriter
environment()
\family default
, 
\family typewriter
ls()
\family default
 y 
\family typewriter
get()
\family default
, como se muestra a continuación.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<contenidoEnv,tidy=F>>=
\end_layout

\begin_layout Plain Layout

ls( environment(duplica) )
\end_layout

\begin_layout Plain Layout

get( "n", environment(duplica) )
\end_layout

\begin_layout Plain Layout

ls( environment(triplica) )
\end_layout

\begin_layout Plain Layout

get( "n", environment(triplica) )
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Una nota final de este capítulo, tiene que ver con el proceso de búsqueda
 que sigue R más allá del ambiente global.
 En la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Asociación-de-símbolos"

\end_inset

 se vio la función 
\family typewriter
search()
\family default
, y la lista de ambientes que arroja como resultado.
 A continuación se muestra un fragmento de la línea de búsqueda en ambientes
 que seguiría R a partir de la función 
\family typewriter
duplica()
\family default
.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<lineaBusqueda, tidy=F>>=
\end_layout

\begin_layout Plain Layout

# El PRIMER ambiente de la busqueda
\end_layout

\begin_layout Plain Layout

environment(duplica) 
\end_layout

\begin_layout Plain Layout

# El SEGUNDO ambiente de la busqueda: padre del anterior
\end_layout

\begin_layout Plain Layout

parent.env(environment(duplica)) 
\end_layout

\begin_layout Plain Layout

# ..
 otra vez el SEGUNDO, solo para comparar
\end_layout

\begin_layout Plain Layout

environment(Construye.multiplicador) 
\end_layout

\begin_layout Plain Layout

# TERCER ambiente: otro nivel en la jerarquia
\end_layout

\begin_layout Plain Layout

parent.env(parent.env(environment(duplica))) 
\end_layout

\begin_layout Plain Layout

# CUARTO ambiente: ...y otro nivel mas en la jerarquía:
\end_layout

\begin_layout Plain Layout

parent.env(parent.env(parent.env(environment(duplica))))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
El primer ambiente, corresponde al de la función 
\family typewriter
duplica()
\family default
 propiamente; la identificación que se muestra de éste, no nos dice mucho,
 pero creednos, se trata del ambiente de la función original.
 El segundo ambiente, al que se ha llegado por dos caminos distintos en
 el código anterior y que es el ambiente padre del primero, corresponde
 al de la función 
\family typewriter
Construye.multiplicador()
\family default
; se trata del ambiente global.
 A partir del ambiente global, los subsecuentes, son en orden los de la
 lista que se se puede obtener con la función 
\family typewriter
search()
\family default
.
 Como ejemplo, aquí sólo se han desplegado dos, el tercer y cuarto ambientes
 en la búsqueda, y cuya identificación se puede constatar en la lista provista
 por 
\family typewriter
search()
\family default
, en la sección 
\begin_inset CommandInset ref
LatexCommand vref
reference "Lista-search"

\end_inset

.
\end_layout

\begin_layout Section
Ejemplo: ajuste de datos a una función de distribución
\end_layout

\begin_layout Standard
En las secciones anteriores se ha visto a grandes rasgos los principales
 temas referentes a la construcción de funciones.
 Así, se está ya en condiciones de abordar un ejemplo que haga uso de todos
 estos conceptos.
 De este modo, en la presente sección se propone un ejemplo que tiene que
 ver con un interesante tema de la estadística: las funciones de densidad
 y distribución de probabilidades.
\end_layout

\begin_layout Standard
Para darle mayor atractivo a esta sección, se usarán, sin profundizar, algunos
 de los conceptos que se verán en el siguiente capítulo y que tienen que
 ver con el tema de la producción de gráficos en R.
 
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Histogramas-de-frecuencias"

\end_inset

Histogramas de frecuencias
\end_layout

\begin_layout Standard
Para entender este concepto, se introduce aquí un juego de datos correspondiente
 a las precipitaciones promedio acumuladas para el mes de octubre del año
 1970 al año 2010, en el estado de Guerrero.
 La tabla correspondiente a estos datos se muestra en la Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Precipitaciones-promedio-acumula"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename precipGro.png
	lyxscale 60
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Precipitaciones-promedio-acumula"

\end_inset

Precipitaciones promedio acumuladas en el mes de octubre en el estado de
 Guerrero en mm
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Un histograma es una representación gráfica de la frecuencia con que ocurren
 los valores, categorizados como intervalos, de alguna variable aleatoria.
 Por ejemplo, en la tabla de la Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Precipitaciones-promedio-acumula"

\end_inset

, la variable aleatoria es la precipitación, y un histograma, correspondiente
 a sus valores, en R se puede producir como se muestra a continuación.
\end_layout

\begin_layout Standard
Primeramente, si se supone que la información se encuentra en un archivo
 de nombre 
\begin_inset Quotes eld
\end_inset

PrecipOctGro.txt
\begin_inset Quotes erd
\end_inset

, su lectura para cargar un 
\emph on
data frame
\emph default
 se hace con:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<hist0>>=
\end_layout

\begin_layout Plain Layout

pp <- read.table("PrecipOctGro.txt")
\end_layout

\begin_layout Plain Layout

head(pp) # para verificar los primeros 6 renglones
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ahora, para la producción del histograma no se requiere del año en el que
 se tuvo tal o cuál precipitación; esto es, sólo interesan los valores de
 las precipitaciones.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<hist1, eval=F>>=
\end_layout

\begin_layout Plain Layout

hh <- hist(pp$Precip, breaks=15)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
El resultado de la aplicación de la función 
\family typewriter
hist()
\family default
, se puede ver en la Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Histograma-de-precipitaciones"

\end_inset

.
 El argumento 
\family typewriter
breaks=15
\family default
, le indica a la función 
\emph on
más o menos
\emph default
 cuántas barras producir, o sea, en cuántos intervalos se dividirán los
 datos.
 Si este argumento no se proporciona, el lenguaje seleccionará un valor
 
\emph on
adecuado
\emph default
.
 Como se puede ver en la figura, el número de intervalos resultantes para
 este caso fue 13, un número más o menos cercano al sugerido.
 No nos detendremos aquí a revisar la especificación de los títulos principal
 y de los ejes de la figura, pues esto se verá en un capítulo posterior.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout

<<hist2, ref.label='hist1', echo=FALSE, fig.width=4, fig.height=4, fig.show='hold',
 out.width='.5
\backslash

\backslash
linewidth'>>=
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Histograma-de-precipitaciones"

\end_inset

Histograma de precipitaciones para el estado de Guerrero en octubre
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En el código para producir el histograma, se ha asignado el 
\emph on
resultado
\emph default
 de la función 
\family typewriter
hist()
\family default
, a la variable 
\family typewriter
hh
\family default
.
 De no haberlo hecho, la gráfica correspondiente, mostrada en la Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Histograma-de-precipitaciones"

\end_inset

, se hubiera producido de cualquier manera.
 La ventaja de guardar el resultado, es que se puede contar con la información
 empleada para construir el histograma.
 En seguida se muestra el contenido de tal variable.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<hh>>=
\end_layout

\begin_layout Plain Layout

hh
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
De momento interesan los elementos 
\family typewriter
$breaks
\family default
 y 
\family typewriter
$counts
\family default
 de la variable 
\family typewriter
hh
\family default
.
 El elemento 
\family typewriter
$breaks
\family default
, indica en qué valores se 
\emph on
rompen
\emph default
 los intervalos de la variable aleatoria.
 En este caso, por ejemplo, los dos primeros intervalos, serían: 
\begin_inset Formula $20\leq precip<40$
\end_inset

 y 
\begin_inset Formula $40\leq precip<60$
\end_inset

.
 El elemento 
\family typewriter
$counts
\family default
, indica la frecuencia de aparición del valor asignado a cada intervalo.
 Así, por ejemplo, los valores de 
\family typewriter
$counts
\family default
 correspondientes a los dos primeros intervalos son 2 y 3, respectivamente,
 lo que indica que, de los datos originales, hay dos precipitaciones entre
 20 y 40 mm, y hay tres entre 40 y 60 mm, y así para todos los otros casos.
\end_layout

\begin_layout Standard
Una alternativa en los histogramas, consiste en el uso de la densidad en
 vez de la frecuencia, definida como, la frecuencia, o número de ocurrencias
 para un intervalo, dividida entre el número total de ocurrencias y entre
 el ancho del intervalo, de manera que la suma total de las áreas de las
 barras del histograma sea la unidad.
 Por ejemplo, para el primer intervalo, este valor sería: 
\begin_inset Formula $2/(41\cdot20)=0.002439$
\end_inset

.
 De hecho, en el código anterior, el elemento 
\family typewriter
$density
\family default
 de la variable 
\family typewriter
hh
\family default
, muestra cada uno de estos valores.
 Para producir este diagrama, basta con definir el argumento 
\family typewriter
freq
\family default
 en la función 
\family typewriter
hist()
\family default
, como FALSO, como se muestra a continuación.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<hist3, eval=F>>=
\end_layout

\begin_layout Plain Layout

hist(pp$Precip, breaks=15, freq=FALSE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ahora, este nuevo resultado de la aplicación de la función 
\family typewriter
hist()
\family default
, se puede ver en la Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Histograma-de-precipitaciones-1"

\end_inset

.
 Nótese que este diagrama es igual que el anterior, solamente con un cambio
 de escala en el eje de las ordenadas.
 Lo interesante de esta versión es que ahora se puede hablar no en términos
 absolutos, sino de porcentajes.
 Por ejemplo, si se toman los intervalos consecutivos del 3 al 5 y se suman
 las densidades correspondientes y se multiplica ese valor por el ancho
 del intervalo, lo que corresponde al área de las tres barras, se puede
 decir que el 51.22% de las precipitaciones estuvo entre 60 y 120 mm durante
 el período de las observaciones.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout

<<hist4, ref.label='hist3', echo=FALSE, fig.width=4, fig.height=4, fig.show='hold',
 out.width='.5
\backslash

\backslash
linewidth'>>=
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Histograma-de-precipitaciones-1"

\end_inset

Histograma de precipitaciones para el estado de Guerrero en octubre
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Densidades y distribuciones de probabilidades
\end_layout

\begin_layout Standard
Con referencia al ejemplo anterior, se puede ver que, en general el número
 de observaciones de las que se puede disponer es limitado: 41, para este
 caso.
 Si, hipotéticamente, se pudiera contar con un número infinito de observaciones,
 el ancho de los intervalos podría reducirse a un valor muy cercano a cero
 y en vez de la gráfica tipo escalera de la Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Histograma-de-precipitaciones-1"

\end_inset

, se podría tener una gráfica continua, posiblemente semejante a la que
 se muestra en la Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Ajuste-del-histograma"

\end_inset

, y cuya área total debajo de la curva fuese la unidad.
 Si, además de eso, se pudiera afirmar que esa curva es representativa no
 sólo de lo que ha ocurrido históricamente, sino de lo que pudiera ocurrir
 en el futuro, estaríamos frente al concepto que se conoce como 
\emph on
funciones de densidad de probabilidades
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
Las funciones de 
\emph on
distribución
\emph default
 de probabilidades son simplemente el acumulado de las funciones de densidad
 de probabilidades.
 Si 
\begin_inset Formula $p(y)$
\end_inset

 es la función de densidad de probabilidades de una variable aleatoria 
\begin_inset Formula $y$
\end_inset

, entonces la función de distribución de probabilidades está dada por 
\begin_inset Formula $P(y)=\intop_{-\infty}^{x=y}p(x)dx$
\end_inset

 .
\end_layout

\end_inset

 .
 De igual manera que se hizo en la sección anterior, sólo que hablando en
 términos de probabilidades, si en la Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Ajuste-del-histograma"

\end_inset

, se pudiera evaluar el área bajo la curva, entre 
\begin_inset Formula $a$
\end_inset

 y 
\begin_inset Formula $b$
\end_inset

 y esa fuera 
\begin_inset Formula $A$
\end_inset

, se podría decir que la precipitación tiene una probabilidad 
\begin_inset Formula $A$
\end_inset

 de estar entre los valores 
\begin_inset Formula $a$
\end_inset

 y 
\begin_inset Formula $b$
\end_inset

.
 Desde luego que, para evaluar esa área, en este caso sería necesario recurrir
 a las nociones del cálculo integral.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename HistGro.jpg
	lyxscale 70
	width 50text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Ajuste-del-histograma"

\end_inset

Ajuste del histograma a una curva continua
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Desde hace algunos siglos, los matemáticos, como de Moivre, Gauss y Laplace,
 han desarrollado diversos conceptos al rededor de este tema.
 De hecho a Gauss se le atribuye la formulación de las funciones de 
\emph on
densidad y distribución normal
\emph default
 de probabilidades.
 Ambas funciones dependen sólo de dos parámetros estadísticos: la media,
 
\begin_inset Formula $\mu$
\end_inset

, y la desviación estándar, 
\begin_inset Formula $\sigma$
\end_inset

.
 En seguida se muestra la fórmula de la función de densidad normal de probabilid
ades.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\phi(x)=\frac{1}{\sigma\sqrt{2\pi}}e^{-\frac{1}{2}\left(\frac{x-\mu}{\sigma}\right)^{2}}
\]

\end_inset


\end_layout

\begin_layout Standard
Cuando se trabaja con datos de observaciones, se suele usar la media aritmética
 en vez de 
\begin_inset Formula $\mu$
\end_inset

, y la desviación estándar de las observaciones en lugar de 
\begin_inset Formula $\sigma$
\end_inset

.
 Estos valores, para el conjunto de datos que se ha venido manejando, son:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<parametros, tidy=F>>=
\end_layout

\begin_layout Plain Layout

( mu <- mean(pp$Precip) )  # media
\end_layout

\begin_layout Plain Layout

( sigma <- sd(pp$Precip) ) # desviacion estandar
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
En R, la función de densidad normal de probabilidades es 
\family typewriter
dnorm()
\family default
, y si se quiere saber su para varias precipitaciones, se puede hacer como
 sigue:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<dnorm, tidy=F>>=
\end_layout

\begin_layout Plain Layout

valores <- c(20, 50, 115, 150, 200) # precipitaciones
\end_layout

\begin_layout Plain Layout

dnorm(valores, mu, sigma)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como 
\begin_inset Formula $\mu$
\end_inset

 y 
\begin_inset Formula $\sigma$
\end_inset

 no varían para un conjunto de observaciones dado, conviene hacer una función
 que solamente dependa de un solo argumento, 
\begin_inset Formula $x$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<dnomrmX, tidy=F>>=
\end_layout

\begin_layout Plain Layout

dnormX <- function(x) dnorm(x, mu, sigma)
\end_layout

\begin_layout Plain Layout

dnormX(valores)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "def-func-curve"

\end_inset

Graficar una función como ésta, en R es sencillo y se hace mediante la función
 
\family typewriter
curve()
\family default
.
 Para obtener una buena gráfica de la función de densidad normal de probabilidad
es, conviene saber que más o menos el rango de valores de las abscisas estará
 entre 
\begin_inset Formula $\mu-3\sigma$
\end_inset

 y 
\begin_inset Formula $\mu+3\sigma$
\end_inset

 .
 Esos límites se pueden fijar en la función 
\family typewriter
curve()
\family default
, mediante el parámetro 
\family typewriter
xlim
\family default
.
 Tal como se puede observar en el código siguiente, cuya salida gráfica
 se muestra en la Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Gráfica-de-la-dens-norm"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<hist5, eval=F>>=
\end_layout

\begin_layout Plain Layout

lims <- c(mu-3*sigma, mu+3*sigma)
\end_layout

\begin_layout Plain Layout

curve(dnormX, xlim=lims)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout

<<hist6, ref.label='hist5', echo=FALSE, fig.width=4, fig.height=4, fig.show='hold',
 out.width='.5
\backslash

\backslash
linewidth'>>=
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Gráfica-de-la-dens-norm"

\end_inset

Gráfica de la función de densidad normal de probabilidades
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
La pregunta que surge es: ¿qué tan bien representa la función de distribución
 de probabilidades, los hechos manifestados por el histograma para un conjunto
 de observaciones dado? Para responder esta pregunta, por lo menos cualitativame
nte, conviene sobreponer las dos gráficas, y esto se puede hacer como se
 muestra en el siguiente código, cuya representación gráfica se muestra
 en la Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Combinación-del-histograma"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<hist7, eval=F>>=
\end_layout

\begin_layout Plain Layout

# Notese que ahora los limites: lims, se imponen a la 
\end_layout

\begin_layout Plain Layout

# primer grafica que se produce, en este caso, 
\end_layout

\begin_layout Plain Layout

# al histograma.
\end_layout

\begin_layout Plain Layout

hist(pp$Precip, breaks=15, freq=FALSE, xlim=lims)
\end_layout

\begin_layout Plain Layout

# En lo que sigue, el argumento add=TRUE, indica que la 
\end_layout

\begin_layout Plain Layout

# curva se agrega al grafico anterior
\end_layout

\begin_layout Plain Layout

curve(dnormX, add=TRUE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout

<<hist8, echo=FALSE, fig.width=4, fig.height=4, fig.show='hold', out.width='.7
\backslash

\backslash
linewidth'>>=
\end_layout

\begin_layout Plain Layout

hist(pp$Precip, breaks=15, freq=FALSE, xlim=lims)
\end_layout

\begin_layout Plain Layout

abline(v=0, col="red")
\end_layout

\begin_layout Plain Layout

abline(h=0, col="blue")
\end_layout

\begin_layout Plain Layout

# En lo que sigue, el argumento add=TRUE, indica que la 
\end_layout

\begin_layout Plain Layout

# curva se agrega al grafico anterior
\end_layout

\begin_layout Plain Layout

curve(dnormX, add=TRUE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Combinación-del-histograma"

\end_inset

Combinación del histograma con la función de densidad normal de probabilidades
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Aunque a simple vista, parece que la curva correspondiente a la función
 de densidad de probabilidades, se ajusta bastante bien al histograma; no
 obstante, se puede observar en la Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Combinación-del-histograma"

\end_inset

, que la curva de la función cruza la línea vertical roja correspondiente
 al valor de precipitación 0, por encima de la línea azul correspondiente
 a la densidad 0.
 Así, la función estaría diciendo que hay cierta probabilidad de que haya
 precipitaciones negativas; lo cual, por supuesto, es imposible.
 
\end_layout

\begin_layout Subsection
Funciones de densidad y distribución de probabilidades Gamma
\end_layout

\begin_layout Standard
Las funciones de densidad y distribución de probabilidades Gamma, describen
 de una mejor manera el comportamiento de las precipitaciones que no tienden
 a presentar una simetría, típica de las funciones de densidad normales,
 sino que se 
\emph on
abultan
\emph default
 cerca del cero sin rebasar hacia los valores negativos.
 La Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Funciones-Gamma"

\end_inset

, muestra la apariencia de estas funciones para distintos valores de sus
 parámetros.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout

<<Gamma1, echo=FALSE, fig.width=4, fig.height=4, fig.show='hold', out.width='.8
\backslash

\backslash
linewidth'>>=
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Funciones-Gamma"

\end_inset

Funciones de densidad de probabilidades Gamma para distintos valores de
 parámetros
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
¿Cómo se podría ajustar una de estas funciones al conjunto de datos del
 ejemplo? Lo primero que se tiene que conocer es la fórmula para calcular
 dicha función, que es la siguiente:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
f(x;k,\theta)=\frac{x^{k-1}e^{\nicefrac{-x}{\theta}}}{\theta^{k}\Gamma(k)}
\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
donde, 
\begin_inset Formula $\Gamma(k)$
\end_inset

 es la función gamma evaluada en 
\begin_inset Formula $k$
\end_inset

.
 
\end_layout

\begin_layout Standard
Independientemente de manera como se calcula esta función, lo importante
 a notar aquí es que, al igual que la función de densidad de probabilidades
 normal, depende de dos parámetros, pero, en este caso los parámetros son
 
\begin_inset Formula $k$
\end_inset

 y 
\begin_inset Formula $\theta$
\end_inset

, denominados parámetros de forma (
\emph on
shape
\emph default
) y de escala (
\emph on
scale
\emph default
), respectivamente, y no la media y la desviación estándar.
 Sin embargo, los datos se han caracterizado en términos de su media y su
 desviación estándar.
 
\end_layout

\begin_layout Standard
Para resolver este asunto, se debe notar que toda función de densidad de
 probabilidades tiene a su vez una media y una desviación estándar, o una
 varianza, que para el caso de la función de densidad Gamma son, respectivamente
, como sigue:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\mu=k\theta\label{eq:1}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
v=\sigma^{2}=k\theta^{2}\label{eq:2}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
De esta manera, se tienen dos ecuaciones, no lineales, que describen 
\begin_inset Formula $\mu$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset

 en términos de los parámetros 
\begin_inset Formula $k$
\end_inset

 y 
\begin_inset Formula $\theta$
\end_inset

.
 Ahora, el tema interesante sería poder expresar los parámetros 
\begin_inset Formula $k$
\end_inset

 y 
\begin_inset Formula $\theta$
\end_inset

, en términos de 
\begin_inset Formula $\mu$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset

, que son los valores que se pueden calcular a partir de nuestros datos.
 Como, en este caso, las ecuaciones son bastante simples, por pura manipulación
 algebraica, se puede llegar a las siguientes expresiones para 
\begin_inset Formula $k$
\end_inset

 y 
\begin_inset Formula $\theta$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\theta=\frac{v}{\mu}\label{eq:3}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
k=\frac{\mu^{2}}{v}\label{eq:4}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Esto resolvería nuestro problema, si quisiéramos hacerlo exclusivamente
 para la función de densidad de probabilidades Gamma.
 Sin embargo, si lo queremos desarrollar aquí es un procedimiento más general,
 tal que dados los valores de 
\begin_inset Formula $\mu$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset

, pudiésemos encontrar los valores de los parámetros de la función de densidad,
 tendríamos que resolver cualquier el sistema de ecuaciones no lineales,
 como el de la ecuaciones 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1"

\end_inset

 y
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:2"

\end_inset

, por medio de algún método numérico.
 Esto es lo que se desarrollará en las siguientes secciones.
\end_layout

\begin_layout Subsection
El método de Newton-Raphson para la solución de sistemas de ecuaciones no
 lineales
\end_layout

\begin_layout Standard
El método numérico de Newton-Raphson, se usa para encontrar las raíces de
 alguna función arbitraria, 
\begin_inset Formula $f(x)$
\end_inset

; esto es, encontrar el valor o valores de 
\begin_inset Formula $x$
\end_inset

 cuando 
\begin_inset Formula $f(x)=0$
\end_inset

.
 Su formulación en ese caso es como sigue:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
x_{n+1}=x_{n}-\frac{f(x_{n})}{f'(x_{n})}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
o bien:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
x_{n+1}=x_{n}-\frac{1}{f'(x_{n})}f(x_{n})\label{eq:6}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
donde, 
\begin_inset Formula $x_{n+1}$
\end_inset

 es el valor de 
\begin_inset Formula $x$
\end_inset

 para la siguiente iteración, calculado a partir del valor anterior 
\begin_inset Formula $x_{n}$
\end_inset

, y 
\begin_inset Formula $f'(x_{n})$
\end_inset

, es el valor de la derivada de la función en 
\begin_inset Formula $x_{n}$
\end_inset

.
 
\end_layout

\begin_layout Standard
\noindent
Si lo que se tiene, en vez de 
\begin_inset Formula $f(x)$
\end_inset

, es un sistema de 
\begin_inset Formula $m$
\end_inset

 ecuaciones, cada una con 
\begin_inset Formula $m$
\end_inset

 variables, representado probablemente por el vector 
\begin_inset Formula $\mathbf{x}$
\end_inset

, de dimensión 
\begin_inset Formula $m$
\end_inset

; y el sistema entonces representado por la función vectorial 
\begin_inset Formula $\mathbf{F}(\mathbf{x})$
\end_inset

, en este caso, el método de Newton-Raphson, se formula así:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\mathbf{x}_{n+1}=\mathbf{x}_{n}-[\mathbf{J_{F}}(\mathbf{x}_{n})]^{-1}\times\mathbf{F}(\mathbf{x}_{n})\label{eq:7}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Nótese que aquí, en vez de usar la derivada de la función se está empleando
 
\begin_inset Formula $\mathbf{J_{F}}(\mathbf{x}_{n})$
\end_inset

, que es la matriz Jacobiana de la función evaluada en 
\begin_inset Formula $\mathbf{x}_{n}$
\end_inset

, y cuya definición se verá más adelante.
 
\end_layout

\begin_layout Standard
En la forma que se presenta en la ecuación 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:7"

\end_inset

, el método implica la inversión de una matriz y varias operaciones más.
 Numéricamente, es más conveniente, por medio de algunas manipulaciones
 algebraicas, transformar dicha formulación a la siguiente:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\mathbf{J_{F}}(\mathbf{x}_{n})\times\mathbf{\Delta x}_{n+1}=-\mathbf{F}(\mathbf{x}_{n})\label{eq:8}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
donde, 
\begin_inset Formula $\mathbf{\Delta x}_{n+1}=\mathbf{x}_{n+1}-\mathbf{x}_{n}$
\end_inset

.
 Así formulado ahora el método, como se ha mostrado en la ecuación 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:8"

\end_inset

, el problema consiste en resolver el sistema de ecuaciones lineales, para
 encontrar el vector de 
\emph on
incrementos
\emph default
, desconocido 
\begin_inset Formula $\mathbf{\Delta x}_{n+1}$
\end_inset

.
\end_layout

\begin_layout Standard
Dado que la matriz Jacobiana 
\emph on
se usa
\emph default
 en vez la derivada en el caso del método para un sistema de ecuaciones
 (compárese las ecuaciones 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:6"

\end_inset

 y 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:7"

\end_inset

), como era de esperarse, ella está definida en términos de las distintas
 derivadas parciales de 
\begin_inset Formula $\mathbf{F}(\mathbf{x})$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\mathbf{J_{F}}(\mathbf{x})=\left[\begin{array}{ccc}
\frac{\partial F_{1}}{\partial x_{1}} & \cdots & \frac{\partial F_{1}}{\partial x_{m}}\\
\vdots & \ddots & \vdots\\
\frac{\partial F_{m}}{\partial x_{1}} & \cdots & \frac{\partial F_{m}}{\partial x_{m}}
\end{array}\right]
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Afortunadamente, ni el cálculo de la matriz Jacobiana, ni la solución del
 sistema de ecuaciones o la inversión de la matriz, se tienen que hacer
 partiendo de cero; existen en R, las funciones y las bibliotecas apropiadas
 para resolver cada uno de estos asuntos.
\end_layout

\begin_layout Subsection
Implementación del método en R
\end_layout

\begin_layout Standard
El lenguaje provee directamente la mayoría de la operaciones que se requieren
 para implementar el método, excepto por el cálculo de la matriz jacobiana.
 Ese cálculo se puede encontrar en el paquete 
\begin_inset Quotes eld
\end_inset

numDeriv
\begin_inset Quotes erd
\end_inset

, que está disponible en el sitio de CRAN
\begin_inset Foot
status open

\begin_layout Plain Layout
CRAN es 
\emph on
The Comprehensive R Archive Network
\emph default
 y su sitio es http://cran.r-project.org/
\end_layout

\end_inset

.
 R, puede instalar paquetes de ese sitio, mediante el sencillo llamado a
 la función 
\family typewriter
install.packages()
\family default
, como se muestra en seguida.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<install, eval=F>>=
\end_layout

\begin_layout Plain Layout

install.packages("numDeriv")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La instrucción anterior descarga, de algún repositorio remoto el paquete
 y lo instala en el ambiente de R.
 Para usarlo, sin embargo, es necesario incluirlo en la ejecución, por medio
 del llamado a la función 
\family typewriter
library()
\family default
, como se muestra a continuación.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<library1>>=
\end_layout

\begin_layout Plain Layout

library(numDeriv)
\end_layout

\begin_layout Plain Layout

# Notese que aqui el nombre de la libreria no
\end_layout

\begin_layout Plain Layout

# va entrecomillado.
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La función
\family typewriter
 jacobian()
\family default
, tiene dos argumentos principales, a saber, una función, 
\family typewriter
func
\family default
, con un resultado vectorial, y un vector, 
\family typewriter
x
\family default
, que sería el argumento de 
\family typewriter
func
\family default
, y que indica el punto en el que se quiere la evaluación de la matriz jacobiana.
 
\end_layout

\begin_layout Standard
Para poner todo esto en contexto, se propone aquí un ejemplo, con las siguientes
 dos ecuaciones no lineales:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{array}{c}
x^{2}+yx-10=0\\
y+3xy^{2}-57=0
\end{array}\label{eq:10}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Podemos poner esto en términos de una función vectorial 
\begin_inset Formula $\mathbf{F}(\mathbf{p})$
\end_inset

,
\begin_inset Foot
status open

\begin_layout Plain Layout
Aquí, 
\begin_inset Formula $\mathbf{p}=(p_{1},p_{2})$
\end_inset

.
\end_layout

\end_inset

 tal que 
\begin_inset Formula $x=p_{1},y=p_{2}$
\end_inset

, y entonces el sistema anterior se puede expresar como:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\mathbf{F}(\mathbf{p})=\begin{array}{c}
p_{1}^{2}+p_{2}p_{1}-10\\
p_{2}+3p_{1}p_{2}^{2}-57
\end{array}=\mathbf{0}\label{eq:11}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
La traducción de una función como ésta al código de R, es casi directa:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<funvec, tidy=F>>=
\end_layout

\begin_layout Plain Layout

miFun <- function(p) c(p[1]^2 + p[1]*p[2] - 10,                        
   
\end_layout

\begin_layout Plain Layout

                       p[2] + 3*p[1]*p[2]^2 - 57)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# y se puede evaluar en un punto cualquiera
\end_layout

\begin_layout Plain Layout

# por ejemplo  
\end_layout

\begin_layout Plain Layout

p_tst <- c(1.5, 3.5) # x=1.5, y=3.5
\end_layout

\begin_layout Plain Layout

miFun(p_tst)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Nótese que el valor de la función es diferente del vector 
\begin_inset Formula $\mathbf{0}$
\end_inset

, lo que indica que los valores dados, no son una solución del sistema de
 ecuaciones 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:11"

\end_inset

.
 
\end_layout

\begin_layout Standard
Ahora, la matriz jacobiana de la función anterior, evaluada en el mismo
 punto del ejemplo, se calcula de manera muy simple así:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<jacobian>>=
\end_layout

\begin_layout Plain Layout

jacobian(miFun, p_tst)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para implementar el método, se tienen dos posibilidades.
 Tanto la ecuación 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:7"

\end_inset

 como la 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:8"

\end_inset

, proporcionan una forma para calcular el siguiente valor del vector 
\begin_inset Formula $\mathbf{x}$
\end_inset

 a partir de un valor anterior.
 Aquí se hará de la manera que lo indica la ecuación 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:8"

\end_inset

, que es numéricamente la más 
\emph on
económica
\emph default
.
 De esta forma, el método establece que se debe resolver el sistema de ecuacione
s descrito por la ecuación 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:8"

\end_inset

 para encontrar el incremento que se debe aplicar al vector 
\begin_inset Formula $\mathbf{x}$
\end_inset

 y obtener así un nuevo valor, lo que en R se hace con la función 
\family typewriter
solve()
\family default
.
 Así, si el valor inicial del vector, fuera, para el ejemplo, 
\family typewriter
p_tst
\family default
, y el sistema de ecuaciones, fuera el descrito por la ecuación 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:11"

\end_inset

 y, en el código, por 
\family typewriter
miFun
\family default
, el procedimiento para obtener el siguiente valor es:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<sigval>>=
\end_layout

\begin_layout Plain Layout

incremento <- solve(jacobian(miFun, p_tst), -miFun(p_tst))
\end_layout

\begin_layout Plain Layout

# El incremento es:
\end_layout

\begin_layout Plain Layout

incremento
\end_layout

\begin_layout Plain Layout

siguiente_p <- p_tst + incremento
\end_layout

\begin_layout Plain Layout

# Y el siguiente valor de p es:
\end_layout

\begin_layout Plain Layout

siguiente_p
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para que el procedimiento sea general, la función podrá ser cualquiera que
 represente un sistema de 
\emph on
m
\emph default
 ecuaciones no lineales, con 
\emph on
m
\emph default
 incóginitas.
 Por consiguiente conviene escribir una función de la situiente manera:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<funcsolve>>=
\end_layout

\begin_layout Plain Layout

sigDx <- function(ff, x) {solve(jacobian(ff, x), -ff(x))}
\end_layout

\begin_layout Plain Layout

# y podemos obtener los mismos resultados que antes con:
\end_layout

\begin_layout Plain Layout

(siguiente_p <- p_tst + sigDx(miFun, p_tst))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para concluir el método, lo anterior se tiene aplicar iterativamente, y
 para determinar la salida del ciclo de iteraciones se deben aplicar criterios
 de aproximación de los valores encontrados.
 Estos criterios se aplicarán sobre el módulo del incremento, ya que si
 este es cero entre dos iteraciones consecutivas, se habrán encontrado los
 valores buscados.
 Se podrá optar entre dos criterios: el simple valor absoluto del módulo
 del incremento, o un valor relativo al módulo del vector encontrado.
 De este modo, la función para el método de Newton-Raphson queda como sigue:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<NwtRph, tidy=F>>=
\end_layout

\begin_layout Plain Layout

# Funcion para calculo del modulo o magnitud de un vector
\end_layout

\begin_layout Plain Layout

modulus <- function(x) sqrt(sum(x^2)) 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

NwtRph <- function(ff, x0, eps=0.0001, lim=500, absComp=F) {
\end_layout

\begin_layout Plain Layout

  n <- 0 # numero de iteracion
\end_layout

\begin_layout Plain Layout

  repeat { # repeticion infinita
\end_layout

\begin_layout Plain Layout

    difx <- sigDx(ff, x0) # diferencia de la sig.
 aprox.
\end_layout

\begin_layout Plain Layout

    x <- x0 + difx # la siguiente aproximacion
\end_layout

\begin_layout Plain Layout

    # Hacemos el modulo de la diferencia para checar
\end_layout

\begin_layout Plain Layout

    r <- modulus(difx) # distancia entre x y x0
\end_layout

\begin_layout Plain Layout

    # Comparacion absoluta o relativa
\end_layout

\begin_layout Plain Layout

    if (absComp) { # <-absoluta
\end_layout

\begin_layout Plain Layout

      if (r <= eps) return(x)
\end_layout

\begin_layout Plain Layout

    } else { # <-relativa
\end_layout

\begin_layout Plain Layout

      if (r <= eps*modulus(x0)) return(x)
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    # si llega al maximo de iteraciones
\end_layout

\begin_layout Plain Layout

    # salimos con null
\end_layout

\begin_layout Plain Layout

    if (n > lim) return (NULL)
\end_layout

\begin_layout Plain Layout

    n <- n+1
\end_layout

\begin_layout Plain Layout

    x0 <- x # para la siguiente iteracion
\end_layout

\begin_layout Plain Layout

  } 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Apliquemos para nuestro ejemplo, tomando
\end_layout

\begin_layout Plain Layout

# p_tst, como valor inicial:
\end_layout

\begin_layout Plain Layout

p <- NwtRph(miFun, p_tst)
\end_layout

\begin_layout Plain Layout

print(p) # <- SOLUCION
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Ajuste a la función de densidad de probabilidades
\end_layout

\begin_layout Standard
Para concluir el ejemplo, se hará ahora el ajuste, con los parámetros estadístic
os de los datos, a la función Gamma de densidad de probabilidades.
 Así, lo primero que se necesitará serán los parámetros estadísticos, la
 media y la varianza en este caso, de los datos que se han introducido,
 como ejemplo, en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Histogramas-de-frecuencias"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<paramest, tidy=F>>=
\end_layout

\begin_layout Plain Layout

( mu <- mean(pp$Precip) ) # media
\end_layout

\begin_layout Plain Layout

( vz <- var(pp$Precip) ) # varianza
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
El sistema de ecuaciones que debemos resolver se deriva de las expresiones
 dadas en la ecuaciones 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1"

\end_inset

 y 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:2"

\end_inset

, pero se tiene que expresar a la manera de los sistemas de ecuaciones mostrados
 en las ecuaciones 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:10"

\end_inset

 y 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:11"

\end_inset

, o sea, de 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1"

\end_inset

 y 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:2"

\end_inset

 se obtiene:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{array}{c}
k\theta-\mu=0\\
k\theta^{2}-v=0
\end{array}\label{eq:12}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
y si se hace 
\begin_inset Formula $k=p_{1},\theta=p_{2}$
\end_inset

, se puede, igual que antes, tener una función vectorial 
\begin_inset Formula $\mathbf{F}(\mathbf{p})$
\end_inset

, así:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\mathbf{F}(\mathbf{p})=\begin{array}{c}
p_{1}p_{2}-\mu\\
p_{1}p_{2}^{2}-v
\end{array}=\mathbf{0}\label{eq:13}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
que, de manera casi inmediata, se puede traducir al código de R así:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<sistecs, tidy=F>>=
\end_layout

\begin_layout Plain Layout

miFun <- function(p) c(p[1]*p[2] - mu,
\end_layout

\begin_layout Plain Layout

                       p[1]*p[2]^2 - vz)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si ahora, se considera como primera aproximación 
\begin_inset Formula $\mathbf{p}=(k,\theta)=(5,2)$
\end_inset

, simplemente se aplica, la función 
\family typewriter
NwtRph()
\family default
, desarrollada con anterioridad, así:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<aplNwtRph>>=
\end_layout

\begin_layout Plain Layout

p0 <- c(5,2) 
\end_layout

\begin_layout Plain Layout

p <- NwtRph(miFun, p0) 
\end_layout

\begin_layout Plain Layout

print(p) 
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Así, los parámetros de la función de denssidad de probabilidades Gamma son:
 
\begin_inset Formula $k=$
\end_inset


\begin_inset Flex S/R expression
status collapsed

\begin_layout Plain Layout

p[1]
\end_layout

\end_inset

, 
\begin_inset Formula $\theta=$
\end_inset


\begin_inset Flex S/R expression
status collapsed

\begin_layout Plain Layout

p[2]
\end_layout

\end_inset

.
 Como una curiosidad, nótese que estos valores son los mismos que se hubieran
 obtenido de aplicar las ecuaciones 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:3"

\end_inset

 y 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:4"

\end_inset

.
\end_layout

\begin_layout Standard
Para terminar, combinaremos el histograma de nuestros datos, con la curva
 de la función de densidad de probabilidades Gamma correspondiente a los
 parámetros encontrados.
 
\end_layout

\begin_layout Standard
La función 
\family typewriter
curve()
\family default
, descrita de manera breve en la sección 
\begin_inset CommandInset ref
LatexCommand vref
reference "def-func-curve"

\end_inset

, permitirá graficar la curva de la función de densidad Gamma.
 No obstante, para ello se necesita definir esa función de densidad, en
 términos de un sólo argumento, esto es, la variable aleatoria, de la siguiente
 manera:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<dgammaX, tidy=F>>=
\end_layout

\begin_layout Plain Layout

dgammaX <- function(x) dgamma(x, shape=p[1], scale=p[2])
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Y, ahora sí, ya se puede proceder a hacer la gráfica combinada, de la manera
 siguiente:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<combinadas, eval=F, tidy=F>>=
\end_layout

\begin_layout Plain Layout

# PRIMERO el histograma:
\end_layout

\begin_layout Plain Layout

hist(pp$Precip, breaks=15, freq=FALSE) 
\end_layout

\begin_layout Plain Layout

# Aqui, 'hist' no necesita el argumento 'xlim', ya
\end_layout

\begin_layout Plain Layout

# que, como se vera en la grafica la f.
 de densidad
\end_layout

\begin_layout Plain Layout

# Gamma, se apega de mejor manera a los datos, o sea,
\end_layout

\begin_layout Plain Layout

# al histograma.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# LUEGO, la funcion de densidad:
\end_layout

\begin_layout Plain Layout

curve(dgammaX, add=TRUE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "El-resultado-del-código"

\end_inset

El resultado del código anterior, es parecido al que se muestra en la Fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Ajuste-de-datos"

\end_inset

; sólo que en ésta, con un poco de azúcar visual, como los colores, sombreados
 y títulos, que son materia de un próximo capítulo.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout

<<Ajuste, echo=FALSE, fig.width=4, fig.height=4, fig.show='hold', out.width='.8
\backslash

\backslash
linewidth'>>=
\end_layout

\begin_layout Plain Layout

hist(pp$Precip, freq=F,
\end_layout

\begin_layout Plain Layout

     col="blue", density=25, breaks=15, main="Histograma y densidad Gamma",
\end_layout

\begin_layout Plain Layout

     xlab="precipitacion (mm)", ylab="Densidad")
\end_layout

\begin_layout Plain Layout

curve(dgammaX, col="green", lwd=3, add=T)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Ajuste-de-datos"

\end_inset

Ajuste de datos a una función de densidad de probabilidades Gamma
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\end_body
\end_document
