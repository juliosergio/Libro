install.packages("knitr")
install.packages("numDeriv")
source('~/Copy/Libro/NwRphSimult.R')
test()
install.packages("swirl")
library(swirl)
rm(list=ls())
source('~/Mega/Libro/DesemplEducSup.R')
?plot
plot(rnorm(5))
plot(rnorm(5),1)
plot(rnorm(5),rep(1,5)
)
?plot
desempl.educ.sup$prcnt[1]
trunc(desempl.educ.sup$prcnt[1])
source('~/Mega/Libro/DesemplEducSup.R')
tinf:tinf+5
tinf:(tinf+5)
source('~/Mega/Libro/DesemplEducSup.R')
source('~/Mega/Libro/DesemplEducSup.R')
?heat.colors
source('~/Mega/Libro/DesemplEducSup.R')
source('~/Mega/Libro/DesemplEducSup.R')
source('~/Mega/Libro/EjemploPoissons.R')
??factorial
factorial(3)
dpois(12,10)
(10^12/factorial(12))*exp(-10)
?dpois
source('~/Mega/Libro/EjemploPoissons.R')
arr <- array(1:20, c(4,5))
arr
arr%%10==0
arr[arr%%10==0,1]
arr[,1]%%10==0
arr[,2]%%10==0
arr[,3]%%10==0
arr[,4]%%10==0
arr[,5]%%10==0
Reduce("|", arr[,1]%%10==0)
Reduce("|", arr[,3]%%10==0)
Reduce("|", arr[,5]%%10==0)
T %in% arr[,5]%%10==0
T %in% arr[,2]%%10==0
arr[,2]%%10==0
T %in% (arr[,2]%%10==0)
T %in% (arr[,3]%%10==0)
a <- 1:3
b <- 4:6
sum(a*b)
a %*% b
c <- 8:10
sum(b*c)
m <- rbind(a,c)
m
m %*% b
install.packages("RColorBrewer")
library(RColorBrewer)
plot(1:8, pch=15, col=1:8)
plot(1:9, pch=15, col=1:9)
?par
plot(1:9, pch=15, cex=3 col=1:9)
plot(1:9, pch=15, cex=3, col=1:9)
palette(brewer.pal(15, "Set3"))
palette(brewer.pal(12, "Set3"))
plot(1:9, pch=15, cex=3 col=1:9)
plot(1:9, pch=15, cex=3, col=1:9)
?readline
?persp
?strsplit
aa <- function(a="uno", b="dos") {
print (a)
print (b)
}
aa()
aa(list(a="xx"))
aa('list(a="xx"))
??dotted
f <- function() x
formals(f)
formals(f) <- al <- alist(x = , y = 2+3, ... = )
f
a1
require(stats); require(graphics)
length(formals(lm))      # the number of formal arguments
names(formals(boxplot))  # formal arguments names
f <- function(x) a+b
formals(f) <- alist(a = , b = 3) # function(a, b = 3) a+b
f(2) # result = 5
f
formals(f)
alist(x = , y = 2+3, ... = )
f
f(alist(a=5, b=8))
f alist(a=5, b=8)
??"repeat"
?assign
# Ejamplo de graficacion 3D
# g <- function(x) x/2
g <- function(x) x
# h <- function(y) (1+3*y^2)/2
h <- function(y) y
f <- function(x,y) g(x)*h(y)
x <- seq(-1,1, length.out=16)
y <- seq(-1,1, length.out=16)
z <- outer(x,y,f)
titulo="Paraboloide hiperb√≥lico"
x11()
theta=30
phi=10
repeat {
ss <- readline("SU-VAR>")
if (length(ss)==0) break
aa <- strsplit(ss, "=")
assign(aa[1],as.numeric(aa[2]))
persp(x,y,z,theta = theta, phi = phi, expand=0.7, col = "lightblue",
ltheta = 120, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "z", main=titulo
) -> res # Se guarda la transformacion
}
class(aa)
aa
# Ejamplo de graficacion 3D
# g <- function(x) x/2
g <- function(x) x
# h <- function(y) (1+3*y^2)/2
h <- function(y) y
f <- function(x,y) g(x)*h(y)
x <- seq(-1,1, length.out=16)
y <- seq(-1,1, length.out=16)
z <- outer(x,y,f)
titulo="Paraboloide hiperb√≥lico"
x11()
theta=30
phi=10
repeat {
ss <- readline("SU-VAR>")
if (length(ss)==0) break
aa <- strsplit(ss, "=")
assign(aa[[1]][1],as.numeric(aa[[1]][2]))
persp(x,y,z,theta = theta, phi = phi, expand=0.7, col = "lightblue",
ltheta = 120, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "z", main=titulo
) -> res # Se guarda la transformacion
}
ss
??nchars
nchars(ss)
nchar(ss)
# SCRIPT
# -----------
rm(list=ls()) # comando para limpar a mem√≥ria do R
#---------------------------------------≠----------------------------------
# Entrada de dados
#---------------------------------------≠----------------------------------
Y=c(16.68,11.5,12.03,14.88,13.75,18.11,8.0,17.83,79.24,21.5,40.33,21,13.5,
19.75,24,29,15.35,19,9.5,35.1,17.9,52.32,18.75,19.83,10.75)
X1=c(7,3,3,4,6,7,2,7,30,5,16,10,4,6,9,10,6,7,3,17,10,26,9,8,4)
X2=c(560,220,340,80,150,330,110,210,1460,605,688,215,255,462,448,776,200,
132,36,770,140,810,450,635,150)
ex1=as.data.frame(cbind(Y,X1,X2)); ex1
attach(ex1) # anexando os dados na mem√≥ria do R
names(ex1)
dim(ex1)
#---------------------------------------≠-------------------
# Gr√°fico com as 3 vari√°veis em estudo em 2D
#---------------------------------------≠-------------------
require(scatterplot3d)
fig = scatterplot3d(X1,X2,Y, box=F, type='p', lwd=1, pch=19,
xlim=c(0,50), ylim=c(0,1500), zlim=c(0,150))
plano = lm(Y~X1+X2)
fig$plane3d(plano, lty.box = "solid")
#---------------------------------------≠-------------------
# Gr√°fico com as 3 vari√°veis em estudo em 3D
#---------------------------------------≠-------------------
require(Rcmdr)
scatter3d(X1, Y, X2, ellipsoid=F, surface=T, point.col='yellow',
bg='black', sphere.size=1.2, revolutions=1, axis.col='white',
xlab="Quantidade Estocada", ylab="Tempo (min)", zlab="Distancia (pes)")
?scatter3d
?library
library(help=rgl)
library(help=car)
# SCRIPT
# -----------
rm(list=ls()) # comando para limpar a mem√≥ria do R
#---------------------------------------≠----------------------------------
# Entrada de dados
#---------------------------------------≠----------------------------------
Y=c(16.68,11.5,12.03,14.88,13.75,18.11,8.0,17.83,79.24,21.5,40.33,21,13.5,
19.75,24,29,15.35,19,9.5,35.1,17.9,52.32,18.75,19.83,10.75)
X1=c(7,3,3,4,6,7,2,7,30,5,16,10,4,6,9,10,6,7,3,17,10,26,9,8,4)
X2=c(560,220,340,80,150,330,110,210,1460,605,688,215,255,462,448,776,200,
132,36,770,140,810,450,635,150)
ex1=as.data.frame(cbind(Y,X1,X2)); ex1
attach(ex1) # anexando os dados na mem√≥ria do R
names(ex1)
dim(ex1)
#---------------------------------------≠-------------------
# Gr√°fico com as 3 vari√°veis em estudo em 2D
#---------------------------------------≠-------------------
require(scatterplot3d)
fig = scatterplot3d(X1,X2,Y, box=F, type='p', lwd=1, pch=19,
xlim=c(0,50), ylim=c(0,1500), zlim=c(0,150))
plano = lm(Y~X1+X2)
fig$plane3d(plano, lty.box = "solid")
#---------------------------------------≠-------------------
# Gr√°fico com as 3 vari√°veis em estudo em 3D
#---------------------------------------≠-------------------
library(splines)
library(car)
library(rgl)
library(mgcv)
scatter3d(X1, Y, X2, ellipsoid=F, surface=T, point.col='yellow',
bg='black', sphere.size=1.2, revolutions=1, axis.col='white',
xlab="Quantidade Estocada", ylab="Tempo (min)", zlab="Distancia (pes)")
rm(list=ls()) # comando para limpar a mem√≥ria do R
#---------------------------------------≠----------------------------------
# Entrada de dados
#---------------------------------------≠----------------------------------
Y=c(16.68,11.5,12.03,14.88,13.75,18.11,8.0,17.83,79.24,21.5,40.33,21,13.5,
19.75,24,29,15.35,19,9.5,35.1,17.9,52.32,18.75,19.83,10.75)
X1=c(7,3,3,4,6,7,2,7,30,5,16,10,4,6,9,10,6,7,3,17,10,26,9,8,4)
X2=c(560,220,340,80,150,330,110,210,1460,605,688,215,255,462,448,776,200,
132,36,770,140,810,450,635,150)
ex1=as.data.frame(cbind(Y,X1,X2)); ex1
attach(ex1) # anexando os dados na mem√≥ria do R
names(ex1)
dim(ex1)
#---------------------------------------≠-------------------
# Gr√°fico com as 3 vari√°veis em estudo em 2D
#---------------------------------------≠-------------------
require(scatterplot3d)
fig = scatterplot3d(X1,X2,Y, box=F, type='p', lwd=1, pch=19,
xlim=c(0,50), ylim=c(0,1500), zlim=c(0,150))
plano = lm(Y~X1+X2)
fig$plane3d(plano, lty.box = "solid")
library(rgl)
scatter3d(X1, Y, X2, ellipsoid=F, surface=T, point.col='yellow',
bg='black', sphere.size=1.2, revolutions=1, axis.col='white',
xlab="Quantidade Estocada", ylab="Tempo (min)", zlab="Distancia (pes)")
library(help=rgl)
??scatter3d
library(car)
library(help=car)
library(car)
rm(list=ls()) # comando para limpar a mem√≥ria do R
#---------------------------------------≠----------------------------------
# Entrada de dados
#---------------------------------------≠----------------------------------
Y=c(16.68,11.5,12.03,14.88,13.75,18.11,8.0,17.83,79.24,21.5,40.33,21,13.5,
19.75,24,29,15.35,19,9.5,35.1,17.9,52.32,18.75,19.83,10.75)
X1=c(7,3,3,4,6,7,2,7,30,5,16,10,4,6,9,10,6,7,3,17,10,26,9,8,4)
X2=c(560,220,340,80,150,330,110,210,1460,605,688,215,255,462,448,776,200,
132,36,770,140,810,450,635,150)
ex1=as.data.frame(cbind(Y,X1,X2)); ex1
attach(ex1) # anexando os dados na mem√≥ria do R
names(ex1)
dim(ex1)
#---------------------------------------≠-------------------
# Gr√°fico com as 3 vari√°veis em estudo em 2D
#---------------------------------------≠-------------------
require(scatterplot3d)
fig = scatterplot3d(X1,X2,Y, box=F, type='p', lwd=1, pch=19,
xlim=c(0,50), ylim=c(0,1500), zlim=c(0,150))
plano = lm(Y~X1+X2)
fig$plane3d(plano, lty.box = "solid")
#---------------------------------------≠-------------------
# Gr√°fico com as 3 vari√°veis em estudo em 3D
#---------------------------------------≠-------------------
library(car)
scatter3d(X1, Y, X2, ellipsoid=F, surface=T, point.col='yellow',
bg='black', sphere.size=1.2, revolutions=1, axis.col='white',
xlab="Quantidade Estocada", ylab="Tempo (min)", zlab="Distancia (pes)")
scatter3d(X1, Y, X2, ellipsoid=F, surface=T, point.col='yellow',
bg='black', sphere.size=1.2, revolutions=1, axis.col='white',
xlab="Quantidade Estocada", ylab="Tempo (min)", zlab="Distancia (pes)")
rm(list=ls()) # comando para limpar a mem√≥ria do R
#---------------------------------------≠----------------------------------
# Entrada de dados
#---------------------------------------≠----------------------------------
Y=c(16.68,11.5,12.03,14.88,13.75,18.11,8.0,17.83,79.24,21.5,40.33,21,13.5,
19.75,24,29,15.35,19,9.5,35.1,17.9,52.32,18.75,19.83,10.75)
X1=c(7,3,3,4,6,7,2,7,30,5,16,10,4,6,9,10,6,7,3,17,10,26,9,8,4)
X2=c(560,220,340,80,150,330,110,210,1460,605,688,215,255,462,448,776,200,
132,36,770,140,810,450,635,150)
ex1=as.data.frame(cbind(Y,X1,X2)); ex1
attach(ex1) # anexando os dados na mem√≥ria do R
names(ex1)
dim(ex1)
#---------------------------------------≠-------------------
# Gr√°fico com as 3 vari√°veis em estudo em 2D
#---------------------------------------≠-------------------
library(scatterplot3d)
fig = scatterplot3d(X1,X2,Y, box=F, type='p', lwd=1, pch=19,
xlim=c(0,50), ylim=c(0,1500), zlim=c(0,150))
plano = lm(Y~X1+X2)
fig$plane3d(plano, lty.box = "solid")
#---------------------------------------≠-------------------
# Gr√°fico com as 3 vari√°veis em estudo em 3D
#---------------------------------------≠-------------------
#>> require(Rcmdr)
library(car)
scatter3d(X1, Y, X2, ellipsoid=F, surface=T, point.col='yellow',
bg='black', sphere.size=1.2, revolutions=1, axis.col='white',
xlab="Quantidade Estocada", ylab="Tempo (min)", zlab="Distancia (pes)")
?scatter3d
scatter3d(X1, Y, X2, ellipsoid=F, surface=T, point.col='yellow',
bg='black', sphere.size=1.2, revolutions=1, axis.col='white',
xlab="Quantidade Estocada", ylab="Tempo (min)", zlab="Distancia (pes)")
scatter3d(X1, Y, X2, ellipsoid=F, surface=T, point.col='yellow',
bg='black', sphere.size=1.2, revolutions=1, axis.col='white',
xlab="Quantidade Estocada", ylab="Tempo (min)", zlab="Distancia (pes)")
scatter3d(X1, Y, X2, ellipsoid=F, surface=T, point.col='yellow',
bg='black', sphere.size=1.2, revolutions=2, axis.col='white',
xlab="Quantidade Estocada", ylab="Tempo (min)", zlab="Distancia (pes)")
?lm
setwd("~/Mega/Libro")
tt <- read.table("GroPrecip1a12.txt")
head(tt)
names(tt) <- 1:12
head(tt)
rownames(tt)
tt["1970"]
tt["1970",]
?rowname
?rownames
data.frame()
rbind()
a <- rbind()
a <- rbind(a, c(1,2))
a
a <- rbind(a, data.frame(uno=1,dos=2))
a <- NULL
a <- rbind(a, data.frame(uno=1,dos=2))
a
class(names(tt))
names(tt)
source('~/Mega/Libro/ProcesaPrecipGro.R')
dd
head(dd)
head(tt)
Precip=tt[nn,]
nn
debugSource()
debugSource("ProcesaPrecipGro.R")
dd
nn
nn
q
q()
dd <- rbind(
debugSource('~/Mega/Libro/ProcesaPrecipGro.R')
dd
as.numeric(nn)
(as.numeric(names(tt))-1)/12
as.numeric(nn)+(as.numeric(names(tt))-1)/12
tt[nn,]
data.frame(TT=as.numeric(nn)+(as.numeric(names(tt))-1)/12,
Precip==tt[nn,])
data.frame(TT=as.numeric(nn)+(as.numeric(names(tt))-1)/12,
Precip=tt[nn,])
data.frame(TT=as.numeric(nn)+(as.numeric(names(tt))-1)/12,
Precip=as.numeric(tt[nn,])
)
source('~/Mega/Libro/ProcesaPrecipGro.R')
length(dd)
nrows(dd)
head(dd)
nrow(dd)
plot(dd, type="l")
plot(dd, type="h")
hist(dd$Precip)
hist(dd$Precip, freq=F)
lines(density(dd$Precip))
plot(dd, type="l",xlim=c(1990,2000))
?expand.grid
dd
tt
head(tt)
?by
?refactor
?complete.cases
?comb
?combn
?linearize
??linearize
??cases
?grid
??grid
head(tt)
tt1 <- tt[1:10,]
tt1
m1 <- as.matrix(tt1)
m1
as.numeric(m1)
?do.call
tt1
tt1 <- tt[1:6,]
tt1
as.list(t(tt1))
as.data.frame(t(tt1))
do.call(cbind, as.data.frame(t(tt1)))
do.call(cbind, tt1)
matrix(1:20, dim=c(5,4))
?matrix
matrix(1:20, nrow=5)
source('~/Mega/Libro/ProcesaPrecipGro.R')
