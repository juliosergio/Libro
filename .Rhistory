g
g <- outer(a, b, f)
g
g <- outer(a, b, *)
state <- c("tas", "sa",  "qld", "nsw", "nsw", "nt",  "wa",  "wa",
                 "qld", "vic", "nsw", "vic", "qld", "qld", "sa",  "tas",
                 "sa",  "nt",  "wa",  "vic", "qld", "nsw", "nsw", "wa",
state <- c("tas", "sa",  "qld", "nsw", "nsw", "nt",  "wa",  "wa",
"qld", "vic", "nsw", "vic", "qld", "qld", "sa",  "tas",
"sa",  "nt",  "wa",  "vic", "qld", "nsw", "nsw", "wa",
"sa",  "act", "nsw", "vic", "vic", "act")
state
statef <- factor(state)
statef
statef[act]
statef["act"]
statef[2]
statef
statef[[act]]
statef[["act"]]
Lst <- list(name="Fred", wife="Mary", no.children=3,
child.ages=c(4,7,9))
Lst[4]
Lst[4][2]
Lst$ch
Lst$ch[2]
Lst[[4]]
Lst[[4]][2]
Lst[2:3]
Lst
Lst
lst[3] <- NULL
Lst[3] <- NULL
Lst
Lst[3]
search()
Price <- c(52.00, 54.75, 57.50, 57.50, 59.75)
plot(Price)
Price1 <- c(52.00, 54.75, 55, 57.50, 59.75)
plot(Price1)
quit
exit
quit
quit()
install.packages("knitr")
options()
library("knitr", lib.loc="/home/checo/R/i486-pc-linux-gnu-library/2.15")
options()
options()
getwd()
install.packages(c("akima", "aplpack", "DBI", "digest", "e1071", "geometry", "magic", "matrixcalc", "R.matlab", "R.methodsS3", "R.oo", "tcltk2", "tripack", "xlsx"))
sqrt(-1)
sqrt(-1+0i)
getwd()
tt <- read.table("09012.dat")
tt
head(tt)
head(tt[1])
class(tt[1])
class(tt[[1]])
class(tt[[2]])
tt[1:3]
1968 %% 4
1969 %% 4
1972 %% 4
quit
q()
class(Inf)
?plot
source('~/Dropbox/Trabajando/Libro/TrianguloRotado.R', echo=TRUE)
na
NA
polygon(c(m[1,],NA,mt[1,]),c(m[2,],NA,mt[2,]),col=c("blak","red"))
polygon(c(m[1,],NA,mt[1,]),c(m[2,],NA,mt[2,]),col=c("black","red"))
plot( # c(m[1,],m[1,1]), c(m[2,],m[2,1]),
type="n", xlim=c(0,2.5),ylim=c(0,2.5),
main="Triangulo rotado",
xlab="X", ylab="Y")
plot(c(m[1,],m[1,1]), c(m[2,],m[2,1]),
type="n", xlim=c(0,2.5),ylim=c(0,2.5),
main="Triangulo rotado",
xlab="X", ylab="Y")
polygon(c(m[1,],NA,mt[1,]),c(m[2,],NA,mt[2,]),col=c("black","red"))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# Triangulo rotado
m <- cbind(c(1,0), c(2,1), c(1,1))
# Triangulo
plot(c(m[1,],m[1,1]), c(m[2,],m[2,1]),
type="n", xlim=c(0,2.5),ylim=c(0,2.5),
main="Triangulo rotado",
xlab="X", ylab="Y")
# matriz de rotacion
alpha <- 32*pi/180
tr <- cbind(c(cos(alpha),sin(alpha)), c(-sin(alpha),cos(alpha)))
mt <- tr %*% m
# lines(c(mt[1,],mt[1,1]), c(mt[2,],mt[2,1]),col="red")
polygon(x=c(m[1,],NA,mt[1,]), y=c(m[2,],NA,mt[2,]),
density = 25,
col=c("black","red"))
lines(c(0,m[1,3]), c(0,m[2,3]), col="blue",lty="dashed")
lines(c(0,mt[1,3]), c(0,mt[2,3]), col="blue",lty="dashed")
lines(c(0,mt[1,3]), c(0,mt[2,3]), col="blue",lty="dashed")
# Triangulo rotado
m <- cbind(c(1,0), c(2,1), c(1,1))
# Triangulo
plot(c(0,0), # Esto no se pinta
type="n", xlim=c(0,2.5),ylim=c(0,2.5),
main="Triangulo rotado",
xlab="X", ylab="Y")
# matriz de rotacion
alpha <- 32*pi/180
tr <- cbind(c(cos(alpha),sin(alpha)), c(-sin(alpha),cos(alpha)))
mt <- tr %*% m
# lines(c(mt[1,],mt[1,1]), c(mt[2,],mt[2,1]),col="red")
polygon(x=c(m[1,],NA,mt[1,]), y=c(m[2,],NA,mt[2,]),
density = 25,
col=c("black","red"))
lines(c(0,m[1,3]), c(0,m[2,3]), col="blue",lty="dashed")
lines(c(0,mt[1,3]), c(0,mt[2,3]), col="blue",lty="dashed")
source('~/Dropbox/Trabajando/Libro/TrianguloRotado.R', echo=TRUE)
??installed
installed.packages()
installed.packages()
installed.packages()
library(splancs)
ss
a = c(1,2,3)
b = c(18,20,22)
?sd
?max
sd(a)
sd(b)
max(sd(a),sd(b))
?matrix
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = 1))
var1
function example() {
var1 <- 250
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = 1))
print (var2)
print (var1)
}
example <- function () {
var1 <- 250
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = 1))
print (var2)
print (var1)
}
example()
example <- function () {
var1 <- 250
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = 0))
print (var2)
print (var1)
}
example()
example <- function () {
var1 <- 250
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = -2))
print (var2)
print (var1)
}
example()
example <- function () {
var1 <- 250
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = 2))
print (var2)
print (var1)
}
example()
search()
example <- function () {
var1 <- 250
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = 2))
print (var2)
print (var1)
search()
}
example()
ll <- search()
ll
ll[-1]
ll[1]
ll[0]
ll[+1]
ll[+2]
?search
loadedNamespaces()
?assign
sys.frame()
class(sys.frame())
example <- function () {
var1 <- 250
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = sys.frame(-1)))
print (var2)
print (var1)
search()
}
example()
example <- function () {
var1 <- 250
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = sys.frame(-2)))
print (var2)
print (var1)
search()
}
example()
example <- function () {
var1 <- 250
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = sys.call(-1)))
print (var2)
print (var1)
search()
}
example()
example <- function () {
var1 <- 250
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = sys.function(-1)))
print (var2)
print (var1)
search()
}
example()
example <- function () {
var1 <- 250
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = sys.parent(1)))
print (var2)
print (var1)
search()
}
example()
sys.call()
sys.function()
sys.nframe()
example <- function () {
var1 <- 250
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = sys.frame(-1)))
print(sys.nframe())
print (var2)
print (var1)
search()
}
example()
1,2
1;2
sys.frame(1)
sys.frame(0)
myprint
myprint <- function (i) {}
myprint <- function (i) {
print(i);
sys.nframe()
}
myprint(sys.nframe())
example <- function () {
var1 <- 250
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = sys.frame(sys.nframe())))
# print(sys.nframe())
print (var2)
print (var1)
# search()
}
example()
install.packages(c("fields", "formatR", "highr", "plotrix", "tuneR"))
install.packages(c("formatR", "highr", "tuneR"))
install.packages(c("bitops", "digest"), lib="/usr/local/lib/R/site-library")
install.packages(c("car", "chron", "colorspace", "DBI", "effects", "Hmisc", "latticeExtra", "lmtest", "multcomp", "mvtnorm", "Rcmdr", "rgl", "rJava", "RMySQL", "sandwich", "sm", "strucchange", "zoo"), lib="/usr/lib/R/site-library")
install.packages(c("foreign", "spatial"), lib="/usr/lib/R/library")
install.packages("RColorBrewer")
install.packages(c("latticeExtra", "rJava", "RMySQL"), lib="/usr/lib/R/site-library")
w
rm(w)
aa <- 5+6
aa
aa <- 5+6
1792*1.5
install.packages("knitr")
?sys.frame
str_split
?str_split
?str.split
?StrSplit
??"string split"
??"split"
strsplit(c("uno,dos","tres,cuatro"),",")
install.packages("stringr")
library(stringr)
str_split(c("uno,dos","tres,cuatro"),",")
strsplit(c("uno,dos","tres,cuatro"),",")
x <- as.Date("2014-02-25")
x
class(x)
x+5
x-30
install.packages("DBI")
install.packages("RMySQL")
cube
cube <- function(x) {}
cube <- function(x) {
n <- 3
x^3
}
cube(2)
ls(environment(cube))
cube
environment(cube)
ls()
install.packages("knitr")
ls()
myprint
search()
ls("package:base")
t
?t
class(search())
ls("package:stats")
?rm
ls()
ls(".GlobalEnv")
2014-1982
source('~/Ubuntu One/PROY1/ProducePlotsF.R')
Args
Args <- vector()
length(Args)
rm(Args)
length(Args)
Args <- vector()
if (length(Args)) {}
if (length(Args)) {"si"}
exists(Args)
??exist
?sys.frame
?optim
?optimize
?optim
library(knitr)
?read_chunk
?run_chunk
library(knitr)
?read_chunk
setwd("~/Mega/Libro")
ff <- function(x) c(x, 2*x)
curve(ff)
?pop
??pop
d <- data.frame(
k=c(1,2,3,5,9),
theta=c(2,2,2,1,0.5),
col =c("red","green","blue","cyan","brown")
)
d
d$col
as.character(d$col)
d[1,]
d[3,]
?"for"
nrow(d)
?dgamma
?plot
?curve
5%%2
5%%5
!(5%%5)
!(5%%2)
d
?paste
paste0("k=",d$k,"theta=", d$theta)
paste0("k=",d$k,"theta=", d$theta, collapse=", ")
paste("k=",d$k,"theta=", d$theta, sep=", ")
paste0("k=",d$k,", theta=", d$theta)
txt <- paste0("k=",d$k,", theta=", d$theta)
ff <- function(x) dgamma(x, shape=d[1,]$k, scale=d[1,]$theta)
curve(ff, main="", col=d[1,]$col, xlim=c(0,20), ylim=c(0, 0.5),
xlab="precipitacion(mm)", ylab="p")
for (i in 2:nrow(d)) {
ff <- function(x) dgamma(x, shape=d[i,]$k, scale=d[i,]$theta)
curve(ff, add=T, main="", col=d[i,]$col)
}
legend("topleft", txt, col=d$col, pch=15)
ff <- function(x) dgamma(x, shape=d[1,]$k, scale=d[1,]$theta)
curve(ff, main="", col=d[1,]$col, xlim=c(0,20), ylim=c(0, 0.5),
xlab="precipitacion(mm)", ylab="p")
for (i in 2:nrow(d)) {
ff <- function(x) dgamma(x, shape=d[i,]$k, scale=d[i,]$theta)
curve(ff, add=T, main="", col=d[i,]$col)
}
legend("topright", txt, col=d$col, pch=15)
?data.frame
d <- data.frame(
k = c(1,2,3,5,9),
theta = c(2,2,2,1,0.5),
col = c("red","green","blue","cyan","brown"),
stringsAsFactors=F
)
txt <- paste0("k=",d$k,", theta=", d$theta)
ff <- function(x) dgamma(x, shape=d[1,]$k, scale=d[1,]$theta)
curve(ff, main="", col=d[1,]$col, xlim=c(0,20), ylim=c(0, 0.5),
xlab="precipitacion(mm)", ylab="p")
for (i in 2:nrow(d)) {
ff <- function(x) dgamma(x, shape=d[i,]$k, scale=d[i,]$theta)
curve(ff, add=T, main="", col=d[i,]$col)
}
legend("topright", txt, col=d$col, pch=15)
library(knitr)
?read_chunk
?expression
expression(beta)
class(expression(beta))
txt <- expression(paste0("k=",d$k,", theta=", d$theta))
txt
txt <- paste0("k=",d$k,", ", expression(theta), "=", d$theta)
txt
expression(paste("Sampled values, ", mu, "=5, ", sigma,
"=1"))
ee <- c(expression(theta), expression(gamma))
ee
ee <- list(expression(theta), expression(gamma))
ee
ee <- c(ee, expression(alpha))
ee
ee <- list(expression(theta), expression(gamma))
ee
ee[] <- expression(alpha)
ee
ee <- list(expression(theta), expression(gamma))
c(ee, as.list(expression(alpha)))
append(ee, expression(alpha))
ee
ee[[3]] <- expression(alpha)
ee
ee[[]] <- expression(beta)
expression(beta=)
x
x <- 10.3
expression(beta=) x
?atop
?bquote
?atop
?rnorm
d <-rnorm(1000, mean=15)
hist(d, main=bquote(atop(Title, mu==.(mean(d)))))
bquote(atop(Title, mu==.(mean(d))))
class(bquote(atop(Title, mu==.(mean(d)))))
list(bquote(atop(Title, mu==.(mean(d)))))
a <- list(1)
a
a <- c(a,2)
a
a <- list(bquote(atop(Title, mu==.(mean(d)))))
a
a <- c(a,atop(Title, mu == 14.9899534753127))
a
a <- c(a, bquote(atop(Title, mu==.(mean(d)))))
a
source('~/Mega/Libro/Gammas.R', echo=TRUE)
?legend
txt
source('~/.active-rstudio-document', echo=TRUE)
txt
source('~/Mega/Libro/Gammas.R', echo=TRUE)
txt
source('~/Mega/Libro/Gammas.R', echo=TRUE)
source('~/Mega/Libro/Gammas.R', echo=TRUE)
d
dd <- rnorm(1000,mean=15)
hist(d, main=bquote(atop(Title,mu==.(mean(d)))))
hist(dd, main=bquote(atop(Title,mu==.(mean(dd)))))
hist(dd, main=bquote(paste(Title,mu==.(mean(dd)))))
legend(legend=bquote(paste(Title,mu==.(mean(dd)))))
legend("topright", legend=bquote(paste(Title,mu==.(mean(dd)))))
legend("topright", legend=bquote(paste(Title,"--", mu==.(mean(dd)))))
legend("topright", legend=bquote(paste(beta==5,Title,"--", mu==.(mean(dd)))))
legend("topright", legend=bquote(paste(theta==5,Title,"--", mu==.(mean(dd)))))
txt
d
legend("topright", legend=bquote(paste(k==5,Title,"--", mu==.(mean(dd)))))
legend("topright", legend=bquote(paste(k==5,Title,", ", mu==.(mean(dd)))))
source('~/Mega/Libro/Gammas.R', echo=TRUE)
txt
legend("topright", legend=txt[[1]])
legend("topright", legend=txt[[1]], col="red", pch=15)
legend("topright", legend=c(txt[[1]],txt[[2]]), col=c("red","blue"), pch=15)
source('~/Mega/Libro/Gammas.R', echo=TRUE)
