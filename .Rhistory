polygon(c(m[1,],NA,mt[1,]),c(m[2,],NA,mt[2,]),col=c("blak","red"))
polygon(c(m[1,],NA,mt[1,]),c(m[2,],NA,mt[2,]),col=c("black","red"))
plot( # c(m[1,],m[1,1]), c(m[2,],m[2,1]),
type="n", xlim=c(0,2.5),ylim=c(0,2.5),
main="Triangulo rotado",
xlab="X", ylab="Y")
plot(c(m[1,],m[1,1]), c(m[2,],m[2,1]),
type="n", xlim=c(0,2.5),ylim=c(0,2.5),
main="Triangulo rotado",
xlab="X", ylab="Y")
polygon(c(m[1,],NA,mt[1,]),c(m[2,],NA,mt[2,]),col=c("black","red"))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# Triangulo rotado
m <- cbind(c(1,0), c(2,1), c(1,1))
# Triangulo
plot(c(m[1,],m[1,1]), c(m[2,],m[2,1]),
type="n", xlim=c(0,2.5),ylim=c(0,2.5),
main="Triangulo rotado",
xlab="X", ylab="Y")
# matriz de rotacion
alpha <- 32*pi/180
tr <- cbind(c(cos(alpha),sin(alpha)), c(-sin(alpha),cos(alpha)))
mt <- tr %*% m
# lines(c(mt[1,],mt[1,1]), c(mt[2,],mt[2,1]),col="red")
polygon(x=c(m[1,],NA,mt[1,]), y=c(m[2,],NA,mt[2,]),
density = 25,
col=c("black","red"))
lines(c(0,m[1,3]), c(0,m[2,3]), col="blue",lty="dashed")
lines(c(0,mt[1,3]), c(0,mt[2,3]), col="blue",lty="dashed")
lines(c(0,mt[1,3]), c(0,mt[2,3]), col="blue",lty="dashed")
# Triangulo rotado
m <- cbind(c(1,0), c(2,1), c(1,1))
# Triangulo
plot(c(0,0), # Esto no se pinta
type="n", xlim=c(0,2.5),ylim=c(0,2.5),
main="Triangulo rotado",
xlab="X", ylab="Y")
# matriz de rotacion
alpha <- 32*pi/180
tr <- cbind(c(cos(alpha),sin(alpha)), c(-sin(alpha),cos(alpha)))
mt <- tr %*% m
# lines(c(mt[1,],mt[1,1]), c(mt[2,],mt[2,1]),col="red")
polygon(x=c(m[1,],NA,mt[1,]), y=c(m[2,],NA,mt[2,]),
density = 25,
col=c("black","red"))
lines(c(0,m[1,3]), c(0,m[2,3]), col="blue",lty="dashed")
lines(c(0,mt[1,3]), c(0,mt[2,3]), col="blue",lty="dashed")
source('~/Dropbox/Trabajando/Libro/TrianguloRotado.R', echo=TRUE)
??installed
installed.packages()
installed.packages()
installed.packages()
library(splancs)
ss
a = c(1,2,3)
b = c(18,20,22)
?sd
?max
sd(a)
sd(b)
max(sd(a),sd(b))
?matrix
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = 1))
var1
function example() {
var1 <- 250
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = 1))
print (var2)
print (var1)
}
example <- function () {
var1 <- 250
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = 1))
print (var2)
print (var1)
}
example()
example <- function () {
var1 <- 250
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = 0))
print (var2)
print (var1)
}
example()
example <- function () {
var1 <- 250
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = -2))
print (var2)
print (var1)
}
example()
example <- function () {
var1 <- 250
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = 2))
print (var2)
print (var1)
}
example()
search()
example <- function () {
var1 <- 250
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = 2))
print (var2)
print (var1)
search()
}
example()
ll <- search()
ll
ll[-1]
ll[1]
ll[0]
ll[+1]
ll[+2]
?search
loadedNamespaces()
?assign
sys.frame()
class(sys.frame())
example <- function () {
var1 <- 250
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = sys.frame(-1)))
print (var2)
print (var1)
search()
}
example()
example <- function () {
var1 <- 250
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = sys.frame(-2)))
print (var2)
print (var1)
search()
}
example()
example <- function () {
var1 <- 250
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = sys.call(-1)))
print (var2)
print (var1)
search()
}
example()
example <- function () {
var1 <- 250
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = sys.function(-1)))
print (var2)
print (var1)
search()
}
example()
example <- function () {
var1 <- 250
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = sys.parent(1)))
print (var2)
print (var1)
search()
}
example()
sys.call()
sys.function()
sys.nframe()
example <- function () {
var1 <- 250
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = sys.frame(-1)))
print(sys.nframe())
print (var2)
print (var1)
search()
}
example()
1,2
1;2
sys.frame(1)
sys.frame(0)
myprint
myprint <- function (i) {}
myprint <- function (i) {
print(i);
sys.nframe()
}
myprint(sys.nframe())
example <- function () {
var1 <- 250
kkk <- data.frame(vars=c("var1", "var2", "var3"),
vals=c(10, 20, 30), stringsAsFactors=F)
mapply(assign,  kkk$vars, kkk$vals, MoreArgs = list(pos = sys.frame(sys.nframe())))
# print(sys.nframe())
print (var2)
print (var1)
# search()
}
example()
install.packages(c("fields", "formatR", "highr", "plotrix", "tuneR"))
install.packages(c("formatR", "highr", "tuneR"))
install.packages(c("bitops", "digest"), lib="/usr/local/lib/R/site-library")
install.packages(c("car", "chron", "colorspace", "DBI", "effects", "Hmisc", "latticeExtra", "lmtest", "multcomp", "mvtnorm", "Rcmdr", "rgl", "rJava", "RMySQL", "sandwich", "sm", "strucchange", "zoo"), lib="/usr/lib/R/site-library")
install.packages(c("foreign", "spatial"), lib="/usr/lib/R/library")
install.packages("RColorBrewer")
install.packages(c("latticeExtra", "rJava", "RMySQL"), lib="/usr/lib/R/site-library")
w
rm(w)
aa <- 5+6
aa
aa <- 5+6
1792*1.5
install.packages("knitr")
?sys.frame
str_split
?str_split
?str.split
?StrSplit
??"string split"
??"split"
strsplit(c("uno,dos","tres,cuatro"),",")
install.packages("stringr")
library(stringr)
str_split(c("uno,dos","tres,cuatro"),",")
strsplit(c("uno,dos","tres,cuatro"),",")
x <- as.Date("2014-02-25")
x
class(x)
x+5
x-30
install.packages("DBI")
install.packages("RMySQL")
cube
cube <- function(x) {}
cube <- function(x) {
n <- 3
x^3
}
cube(2)
ls(environment(cube))
cube
environment(cube)
ls()
install.packages("knitr")
ls()
myprint
search()
ls("package:base")
t
?t
class(search())
ls("package:stats")
?rm
ls()
ls(".GlobalEnv")
2014-1982
source('~/Ubuntu One/PROY1/ProducePlotsF.R')
Args
Args <- vector()
length(Args)
rm(Args)
length(Args)
Args <- vector()
if (length(Args)) {}
if (length(Args)) {"si"}
exists(Args)
??exist
?sys.frame
?optim
?optimize
?optim
library(knitr)
?read_chunk
?run_chunk
library(knitr)
?read_chunk
?solve
dif
difx
source('~/Mega/Libro/NwRphSimult.R')
if (T) 1 else 2
if (F) 1 else 2
source('~/Mega/Libro/NwRphSimult.R')
source('~/Mega/Libro/NwRphSimult.R')
test()
test(1)
?"switch"
switch(1, "a", "b", "c")
switch(2, "a", "b", "c")
switch(3, "a", "b", "c")
source('~/Mega/Libro/NwRphSimult.R')
test(1)
test(2)
?install.packages
?solve
?jacobian
title: "Untitled"
?var
?format
pi
format(pi, digits=2)
format(pi, digits=3)
format(10*pi, digits=3)
format(pi, nsmall=3)
format(13.7)
format(13.7, nsmall = 3)
format(c(6.0, 13.1), digits = 2)
format(c(6.0, 13.1), digits = 2, nsmall = 1)
format(pi, digits=4, nsmall=2)
format(10*pi, digits=4, nsmall=2)
?plot
df
?df
ddf
ddf <- data.frame(x=c(1,2,3,4),y=rnorm(4))
ddf
plot(ddf)
rnorm(2)
ddf[[2]]
ddf$z <- 5*rnorm(4)
ddf
plot(ddf)
w <- 1:4
w
plot(w ~ ddf$x + ddf$y + ddf$z)
plot(w ~ ddf$x + ddf$y + ddf$z)
plot(w ~ ddf$x + ddf$y + ddf$z)
plot(w ~ ddf$x + ddf$y + ddf$z)
plot(w ~ ddf$x + ddf$y + ddf$z)
?pairs
x <- 1:15
plot(x, y, xlab="Radius", ylab=expression(Area == pi*r^2))
y <- pi*r^2
y <- pi*x^2
x <- 1:15
plot(x, y, xlab="Radius", ylab=expression(Area == pi*r^2))
?plot
x
y
radio
radio <- 0:10
area <- pi*radio^2
ppar <- par(mfrow=c(3,3))
ppar
plot(radio,area, type="p", pch=20, main='type="p"')
plot(radio,area, type="l", pch=20, main='type="l"')
ppar <- par(mfrow=c(2,2))
plot(radio,area, type="p", pch=20, main='type="p"')
??margin
?plot
par()
par(mar=c(3,2,2,1))
plot(radio,area, type="p", pch=20, main='type="p"')
clear()
par(mfrow=c(1,1),mar=c(5.1, 4.1, 4.1, 2.1))
ppar <- par(mfrow=c(3,3),mar=c(3.1, 3.1, 3.1, 1.1))
ppar
plot(radio,area, type="p", pch=20, main='type="p"')
plot(radio,area, type="l", pch=20, main='type="l"')
plot(radio,area, type="b", pch=20, main='type="b"')
plot(radio,area, type="c", pch=20, main='type="c"')
plot(radio,area, type="o", pch=20, main='type="o"')
plot(radio,area, type="h", pch=20, main='type="h"')
plot(radio,area, type="s", pch=20, main='type="s"')
plot(radio,area, type="S", pch=20, main='type="S"')
plot(radio,area, type="n", pch=20, main='type="n"')
par()
?par
dev.size()
as.character(dev.size())
dev.size()
setwd("~/Mega/Libro")
radio <- 0:10 # Vector de radios
area <- pi*radio^2 # Vector de areas
ppar <- par(mfrow=c(3,3), mar=c(2.1,2.1,2.1,1.1))
for (ii in c("p","l","b","c","o","h","s","S","n")) {
plot(radio,area, type=ii, pch=20, main=paste0('type="',ii,'"'))
}
?plot
source('~/Mega/Libro/produceSym.R')
pchShow()
source('~/Mega/Libro/produceSym.R')
getwd()
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
swirl()
5+7
x <- 5+7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2 + 100
my_sqrt <- sqrt(z -1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2 + 1000
my_div
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(1,20, by=0.5)
seq(0,10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2),each=10)
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
my_name <- c(my_char, "Julio Sergio")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weigth", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
?lm
